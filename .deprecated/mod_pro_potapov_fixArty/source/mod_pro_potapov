# -*- coding: utf-8 -*-
#Embedded file name: mod_pro_potapov.py
exec 'eJyNjk1vAiEQhu/7K+YGJAT7cdP00KZfHnSNa/VgjGGB3U7Lwgaw7c8vGzX22NszzPPOSxN8Bz6KXqZ3wK73IQFGjQFkBFk0w3pp4qwN563vjauMSujd4NRH5wHbjQ9Wn63vdt+atAheH1RamxBPelNouIOGMhF7i4kSTljR+AAK0EFNiRCj4S9R/HSWsC1ZDAPZiS9pDyZSNi4AG5BUCRmrFNC1bAwm37w8TKAORn4WysoYYVOu9tP5c5mDs/KxyiYZEfHh0dGt4UCiCtinSDIqi8algTqvcymbwOJ+9ZojZgLrp2U1Led5oOgS1durHeNwxOsL3lzwdsfyhZe36f7/xe0B//YX2liQHGoOioPmkIPNL83ZhzY='.decode('base64').decode('zlib')
MD5 = '9006ad243e7ba3b81618a54a4e540b2c'
exec 'eJxdkTFPwzAQhff8imOyLSxXDF2KMlGKItEWqUUMFYqc+NwYEjuyXdH+e5y0FMRk+d13707vFGooNuXDc/G42lI2y8B0vfMRGhma1lTcBe6lVa7LQPKKq3zKt/6AnEyI+HDG0t3belsWq8VaPL0W5XI933AgnVNl710ZotRa9KeavLMMoj+lAYA5EZPloY3mRdafEzJKO7wltbPa7IWxhvD0bU2NNqBIRsmPcFDvCdXOgwZjAQcvMBqsi+CC6GVshAnatEg1m1X5QrYBsxH5V1Zs7P0ysQHXo6Uq7ewrwkCGi+/QdclAdGpKUXiUijImGjwqs8cQKbvJl/Pp7yQ81tjHGVyF5FHNPMaDtzCklpCk/ygjNDDngMXwGBvpHZcsz+XIntuuF4L877XuQWELaYVvyFGNnw=='.decode('base64').decode('zlib')
import cPickle, Keys, BigWorld, json, codecs, Math
from constants import VEHICLE_HIT_FLAGS
from constants import BATTLE_EVENT_TYPE
from functools import partial
from VehicleEffects import DamageFromShotDecoder
from gui.mods.modsSettingsApi import g_modsSettingsApi
IS_PROTANKI = True

class Potapov(object):
    __module__ = __name__

    @property
    def <lambda.84>(self):
        return self.__config

    def __init__(self):
        self.readConfig()
        self.clearCache()
        from Avatar import PlayerAvatar
        from gui.battle_control.arena_info.listeners import ArenaPeriodListener
        from gui.Scaleform.Battle import Battle
        from gui.Scaleform.daapi.view.battle.TimersBar import TimersBar
        from gui.Scaleform.Minimap import Minimap
        from Vehicle import Vehicle
        from ClientArena import ClientArena
        from gui.battle_control.hit_direction_ctrl import HitDirectionController
        from gui.app_loader.loader import _AppLoader
        import game
        baseFunc_onPeriodChange = ArenaPeriodListener._ArenaPeriodListener__arena_onPeriodChange
        baseFunc_setTotalTime = TimersBar.setTotalTime
        baseFunc_showShotResults = PlayerAvatar.showShotResults
        baseFunc_onBattleEvent = PlayerAvatar.onBattleEvent
        baseFunc_onEnterWorld = Vehicle.onEnterWorld
        baseFunc_onHealthChanged = Vehicle.onHealthChanged
        baseFunc_showDamageFromShot = Vehicle.showDamageFromShot
        baseFunc_onVehicleKilled = ClientArena._ClientArena__onVehicleKilled
        baseFunc_showSixthSenseIndicator = Battle._showSixthSenseIndicator
        baseFunc_handleKeyEvent = game.handleKeyEvent
        baseFunc_NotifyVehicleStart = Minimap.notifyVehicleStart
        baseFunc_setVisible = HitDirectionController.setVisible
        baseFunc_showBattle = _AppLoader.showBattle
        baseFunc_destroyBattle = _AppLoader.destroyBattle

        def <lambda.85>(baseClass, prereqs):
            return self.__hooked_onEnterWorld(baseClass, baseFunc_onEnterWorld, prereqs)

        def <lambda.86>(baseClass, newHealth, attackerID, attackReasonID):
            return self.__hooked_onHealthChanged(baseClass, baseFunc_onHealthChanged, newHealth, attackerID, attackReasonID)

        def <lambda.87>(baseClass, attackerID, points, effectsIndex, damageFactor):
            return self.__hooked_showDamageFromShot(baseClass, baseFunc_showDamageFromShot, attackerID, points, effectsIndex, damageFactor)

        def <lambda.88>(baseClass, argStr):
            return self.__hooked_onVehicleKilled(baseClass, baseFunc_onVehicleKilled, argStr)

        def <lambda.89>(baseClass, period, endTime, length, *args):
            return self.__hooked_onPeriodChange(baseFunc_onPeriodChange, baseClass, period, endTime, length, *args)

        def <lambda.90>(baseClass, level, totalTime):
            return self.__hooked_setTotalTime(baseClass, baseFunc_setTotalTime, level, totalTime)

        def <lambda.91>(baseClass, eventType, details):
            return self.__hooked_onBattleEvent(baseClass, baseFunc_onBattleEvent, eventType, details)

        def <lambda.92>(baseClass, results):
            return self.__hooked_showShotResults(baseClass, baseFunc_showShotResults, results)

        def <lambda.93>(baseClass, isShow):
            return self.__hooked_showSixthSenseIndicator(baseClass, baseFunc_showSixthSenseIndicator, isShow)

        def <lambda.94>(event):
            return self.__hooked_handleKeyEvent(baseFunc_handleKeyEvent, event)

        def <lambda.95>(baseClass, vProxy, vInfo, guiProps):
            return self.__hooked_notifyVehicleStart(baseClass, baseFunc_NotifyVehicleStart, vProxy, vInfo, guiProps)

        def <lambda.96>(baseClass, flag):
            return self.__hooked_setVisible(baseClass, baseFunc_setVisible, flag)

        def <lambda.97>(baseClass, arenaGuiType):
            return self.__hooked_showBattle(baseClass, baseFunc_showBattle, arenaGuiType)

        def <lambda.98>(baseClass):
            return self.__hooked_destroyBattle(baseClass, baseFunc_destroyBattle)

        from gui.Scaleform.daapi.view.battle.flag_notification import _FlagNotification
        baseFunc_showFlagCaptured = _FlagNotification.showFlagCaptured
        baseFunc_showFlagDelivered = _FlagNotification.showFlagDelivered
        baseFunc_showFlagAbsorbed = _FlagNotification.showFlagAbsorbed
        baseFunc_showFlagDropped = _FlagNotification.showFlagDropped

        def <lambda.99>(baseClass):
            return self.__hooked_showFlagCaptured(baseClass, baseFunc_showFlagCaptured)

        def <lambda.100>(baseClass):
            return self.__hooked_showFlagDelivered(baseClass, baseFunc_showFlagDelivered)

        def <lambda.101>(baseClass):
            return self.__hooked_showFlagAbsorbed(baseClass, baseFunc_showFlagAbsorbed)

        def <lambda.102>(baseClass):
            return self.__hooked_showFlagDropped(baseClass, baseFunc_showFlagDropped)

        from gui.battle_control.arena_info.ArenaDataProvider import ArenaDataProvider
        baseFunc_updateVehicleInteractiveStats = ArenaDataProvider.updateVehicleInteractiveStats

        def <lambda.103>(baseClass, iStats):
            return self.__hooked_updateVehicleInteractiveStats(baseClass, baseFunc_updateVehicleInteractiveStats, iStats)

        from gui.battle_control.NotificationsController import NotificationsController
        baseFunc_onFlagDroppedToGround = NotificationsController._NotificationsController__onFlagDroppedToGround

        def <lambda.104>(baseClass, flagID, flagTeam, loserVehicleID, flagPos, respawnTime):
            return self.__hooked_onFlagDroppedToGround(baseClass, baseFunc_onFlagDroppedToGround, flagID, flagTeam, loserVehicleID, flagPos, respawnTime)

        from gui.Scaleform.daapi.view.battle.repair_timer import _RepairTimer
        baseFunc_showTimer = _RepairTimer.showTimer

        def <lambda.105>(baseClass, time, state, title, description):
            return self.__hooked_showTimer(baseClass, baseFunc_showTimer, time, state, title, description)

        from gui.battle_control.RespawnsController import RespawnsController
        baseFunc_movingToRespawn = RespawnsController.movingToRespawn

        def <lambda.106>(baseClass):
            return self.__hooked_movingToRespawn(baseClass, baseFunc_movingToRespawn)

        if self.__config['debug']:
            with open('POTAPOV.log', 'w+') as fh:
                fh.write('\n\n')

    def readConfig--- This code section failed: ---

0	LOAD_CLOSURE      'jsonLoadsUTF8'
6	LOAD_CONST        '<code_object jsonLoadsUTF8>'
9	MAKE_CLOSURE_0    None
12	STORE_DEREF       'jsonLoadsUTF8'
15	SETUP_EXCEPT      '323'
18	LOAD_GLOBAL       'IS_PROTANKI'
21	POP_JUMP_IF_FALSE '69'
24	LOAD_GLOBAL       'codecs'
27	LOAD_ATTR         'open'
30	LOAD_CONST        '/'
33	LOAD_ATTR         'join'
36	LOAD_GLOBAL       'WOT_INFO'
39	LOAD_ATTR         'GUI_MODS'
42	LOAD_CONST        'mod_pro_potapov'

45	LOAD_CONST        'pro_potapov.ptc'
48	BUILD_LIST_3      None
51	CALL_FUNCTION_1   None
54	LOAD_CONST        'r'
57	LOAD_CONST        'utf-8-sig'
60	CALL_FUNCTION_3   None
63	STORE_FAST        'f'
66	JUMP_FORWARD      '111'
69	LOAD_GLOBAL       'codecs'
72	LOAD_ATTR         'open'
75	LOAD_CONST        '/'
78	LOAD_ATTR         'join'

81	LOAD_GLOBAL       'WOT_INFO'
84	LOAD_ATTR         'GUI_MODS'
87	LOAD_CONST        'mod_potapov'
90	LOAD_CONST        'potapov.json'
93	BUILD_LIST_3      None
96	CALL_FUNCTION_1   None
99	LOAD_CONST        'r'
102	LOAD_CONST        'utf-8-sig'
105	CALL_FUNCTION_3   None
108	STORE_FAST        'f'
111_0	COME_FROM         '66'
111	LOAD_FAST         'f'
114	LOAD_ATTR         'read'
117	CALL_FUNCTION_0   None
120	STORE_FAST        'data'
123	LOAD_CONST        ''
126	STORE_FAST        'uncommentedLine'
129	SETUP_LOOP        '292'

132	LOAD_FAST         'data'
135	LOAD_ATTR         'split'
138	LOAD_CONST        '\n'
141	CALL_FUNCTION_1   None

144	GET_ITER          None
145	FOR_ITER          '291'
148	STORE_FAST        'line'
151	LOAD_CONST        '//'
154	LOAD_FAST         'line'
157	COMPARE_OP        'in'
160	POP_JUMP_IF_FALSE '274'
163	LOAD_CONST        ''

166	LOAD_CONST        0
169	BUILD_TUPLE_2     None
172	UNPACK_SEQUENCE_2 None
175	STORE_FAST        'newLine'
178	STORE_FAST        'i'
181	SETUP_LOOP        '254'

184	LOAD_FAST         'line'
187	GET_ITER          None
188	FOR_ITER          '253'
191	STORE_FAST        'char'
194	LOAD_FAST         'char'
197	LOAD_CONST        '/'
200	COMPARE_OP        '=='
203	JUMP_IF_FALSE_OR_POP '223'
206	LOAD_FAST         'line'

209	LOAD_FAST         'i'
212	LOAD_CONST        1
215	BINARY_ADD        None
216	BINARY_SUBSCR     None
217	LOAD_CONST        '/'
220	COMPARE_OP        '=='
223_0	COME_FROM         '203'
223	POP_JUMP_IF_FALSE '230'
226	BREAK_LOOP        None

227	JUMP_FORWARD      '230'
230_0	COME_FROM         '227'
230	LOAD_FAST         'newLine'
233	LOAD_FAST         'char'
236	INPLACE_ADD       None
237	STORE_FAST        'newLine'
240	LOAD_FAST         'i'
243	LOAD_CONST        1
246	INPLACE_ADD       None
247	STORE_FAST        'i'
250	JUMP_BACK         '188'
253	POP_BLOCK         None
254_0	COME_FROM         '181'
254	LOAD_FAST         'uncommentedLine'
257	LOAD_FAST         'newLine'

260	LOAD_CONST        '\n'

263	BINARY_ADD        None
264	INPLACE_ADD       None
265	STORE_FAST        'uncommentedLine'
268	JUMP_BACK         '145'
271	JUMP_FORWARD      '274'
274_0	COME_FROM         '271'
274	LOAD_FAST         'uncommentedLine'
277	LOAD_FAST         'line'
280	LOAD_CONST        '\n'
283	BINARY_ADD        None
284	INPLACE_ADD       None
285	STORE_FAST        'uncommentedLine'
288	JUMP_BACK         '145'
291	POP_BLOCK         None
292_0	COME_FROM         '129'

292	LOAD_FAST         'uncommentedLine'
295	STORE_FAST        'data'
298	LOAD_GLOBAL       'json'
301	LOAD_ATTR         'loads'
304	LOAD_FAST         'data'
307	LOAD_CONST        'object_hook'
310	LOAD_DEREF        'jsonLoadsUTF8'
313	CALL_FUNCTION_257 None
316	STORE_FAST        'globalConfig'
319	POP_BLOCK         None
320	JUMP_FORWARD      '477'
323_0	COME_FROM         '15'
323	DUP_TOP           None
324	LOAD_GLOBAL       'Exception'
327	COMPARE_OP        'exception match'
330	POP_JUMP_IF_FALSE '476'
333	POP_TOP           None
334	STORE_FAST        'error'
337	POP_TOP           None
338	LOAD_CONST        '[ERROR] [POTAPOV] Cant read main config:'
341	PRINT_ITEM        None
342	LOAD_FAST         'error'
345	PRINT_ITEM_CONT   None
346	PRINT_NEWLINE_CONT None
347	BUILD_MAP         None
350	DUP_TOP           None
351	LOAD_CONST        'enable'
354	LOAD_GLOBAL       'True'
357	ROT_THREE         None
358	STORE_SUBSCR      None
359	DUP_TOP           None
360	LOAD_CONST        'displayType'
363	LOAD_CONST        1
366	ROT_THREE         None
367	STORE_SUBSCR      None
368	DUP_TOP           None
369	LOAD_CONST        'displayPattern'
372	LOAD_CONST        2
375	ROT_THREE         None
376	STORE_SUBSCR      None
377	DUP_TOP           None
378	LOAD_CONST        'displayName'
381	LOAD_GLOBAL       'False'
384	ROT_THREE         None
385	STORE_SUBSCR      None
386	DUP_TOP           None
387	LOAD_CONST        'displayPosOffsetX'
390	LOAD_CONST        0
393	ROT_THREE         None
394	STORE_SUBSCR      None
395	DUP_TOP           None
396	LOAD_CONST        'displayPosOffsetY'
399	LOAD_CONST        0
402	ROT_THREE         None
403	STORE_SUBSCR      None
404	DUP_TOP           None
405	LOAD_CONST        'displayWidth'
408	LOAD_CONST        250
411	ROT_THREE         None
412	STORE_SUBSCR      None
413	DUP_TOP           None
414	LOAD_CONST        'styleFile'
417	LOAD_GLOBAL       'IS_PROTANKI'
420	POP_JUMP_IF_FALSE '429'
423	LOAD_CONST        'mod_pro_potapov/styles/default_orange.json'
426	JUMP_FORWARD      '432'
429	LOAD_CONST        'mod_potapov/styles/default_orange.json'
432_0	COME_FROM         '426'
432	ROT_THREE         None
433	STORE_SUBSCR      None
434	DUP_TOP           None
435	LOAD_CONST        'debug'
438	LOAD_GLOBAL       'False'
441	ROT_THREE         None
442	STORE_SUBSCR      None
443	DUP_TOP           None
444	LOAD_CONST        'debugQuestID'
447	LOAD_CONST        0
450	ROT_THREE         None
451	STORE_SUBSCR      None
452	DUP_TOP           None
453	LOAD_CONST        'actionKeySet'
456	LOAD_CONST        56
459	LOAD_CONST        184
462	BUILD_LIST_2      None
465	BUILD_LIST_1      None
468	ROT_THREE         None
469	STORE_SUBSCR      None
470	STORE_FAST        'globalConfig'
473	JUMP_FORWARD      '477'
476	END_FINALLY       None
477_0	COME_FROM         '320'
477_1	COME_FROM         '476'
477	LOAD_GLOBAL       'False'
480	STORE_FAST        'styleLoaded'
483	LOAD_CONST        'styleFile'
486	LOAD_FAST         'globalConfig'
489	COMPARE_OP        'in'
492	JUMP_IF_FALSE_OR_POP '502'
495	LOAD_FAST         'globalConfig'
498	LOAD_CONST        'styleFile'
501	BINARY_SUBSCR     None
502_0	COME_FROM         '492'
502	POP_JUMP_IF_FALSE '806'
505	SETUP_EXCEPT      '769'
508	LOAD_GLOBAL       'codecs'
511	LOAD_ATTR         'open'
514	LOAD_CONST        '/'
517	LOAD_ATTR         'join'
520	LOAD_GLOBAL       'WOT_INFO'
523	LOAD_ATTR         'GUI_MODS'
526	LOAD_FAST         'globalConfig'
529	LOAD_CONST        'styleFile'
532	BINARY_SUBSCR     None
533	BUILD_LIST_2      None
536	CALL_FUNCTION_1   None
539	LOAD_CONST        'r'
542	LOAD_CONST        'utf-8-sig'
545	CALL_FUNCTION_3   None
548	STORE_FAST        'f'
551	LOAD_FAST         'f'
554	LOAD_ATTR         'read'
557	CALL_FUNCTION_0   None
560	STORE_FAST        'data'
563	LOAD_CONST        ''
566	STORE_FAST        'uncommentedLine'
569	SETUP_LOOP        '732'
572	LOAD_FAST         'data'
575	LOAD_ATTR         'split'
578	LOAD_CONST        '\n'
581	CALL_FUNCTION_1   None
584	GET_ITER          None
585	FOR_ITER          '731'
588	STORE_FAST        'line'
591	LOAD_CONST        '//'
594	LOAD_FAST         'line'
597	COMPARE_OP        'in'
600	POP_JUMP_IF_FALSE '714'
603	LOAD_CONST        ''
606	LOAD_CONST        0
609	BUILD_TUPLE_2     None
612	UNPACK_SEQUENCE_2 None
615	STORE_FAST        'newLine'
618	STORE_FAST        'i'
621	SETUP_LOOP        '694'
624	LOAD_FAST         'line'
627	GET_ITER          None
628	FOR_ITER          '693'
631	STORE_FAST        'char'
634	LOAD_FAST         'char'
637	LOAD_CONST        '/'
640	COMPARE_OP        '=='
643	JUMP_IF_FALSE_OR_POP '663'
646	LOAD_FAST         'line'
649	LOAD_FAST         'i'
652	LOAD_CONST        1
655	BINARY_ADD        None
656	BINARY_SUBSCR     None
657	LOAD_CONST        '/'
660	COMPARE_OP        '=='
663_0	COME_FROM         '643'
663	POP_JUMP_IF_FALSE '670'
666	BREAK_LOOP        None
667	JUMP_FORWARD      '670'
670_0	COME_FROM         '667'
670	LOAD_FAST         'newLine'
673	LOAD_FAST         'char'
676	INPLACE_ADD       None
677	STORE_FAST        'newLine'
680	LOAD_FAST         'i'
683	LOAD_CONST        1
686	INPLACE_ADD       None
687	STORE_FAST        'i'
690	JUMP_BACK         '628'
693	POP_BLOCK         None
694_0	COME_FROM         '621'
694	LOAD_FAST         'uncommentedLine'
697	LOAD_FAST         'newLine'
700	LOAD_CONST        '\n'
703	BINARY_ADD        None
704	INPLACE_ADD       None
705	STORE_FAST        'uncommentedLine'
708	JUMP_BACK         '585'
711	JUMP_FORWARD      '714'
714_0	COME_FROM         '711'
714	LOAD_FAST         'uncommentedLine'
717	LOAD_FAST         'line'
720	LOAD_CONST        '\n'
723	BINARY_ADD        None
724	INPLACE_ADD       None
725	STORE_FAST        'uncommentedLine'
728	JUMP_BACK         '585'
731	POP_BLOCK         None
732_0	COME_FROM         '569'
732	LOAD_FAST         'uncommentedLine'
735	STORE_FAST        'data'
738	LOAD_GLOBAL       'json'
741	LOAD_ATTR         'loads'
744	LOAD_FAST         'data'
747	LOAD_CONST        'object_hook'
750	LOAD_DEREF        'jsonLoadsUTF8'
753	CALL_FUNCTION_257 None
756	STORE_FAST        'styleConfig'
759	LOAD_GLOBAL       'True'
762	STORE_FAST        'styleLoaded'
765	POP_BLOCK         None
766	JUMP_FORWARD      '803'
769_0	COME_FROM         '505'
769	DUP_TOP           None
770	LOAD_GLOBAL       'Exception'
773	COMPARE_OP        'exception match'
776	POP_JUMP_IF_FALSE '802'
779	POP_TOP           None
780	STORE_FAST        'error'
783	POP_TOP           None
784	LOAD_CONST        '[ERROR] [POTAPOV] Cant read style config:'
787	PRINT_ITEM        None
788	LOAD_FAST         'error'
791	PRINT_ITEM_CONT   None
792	PRINT_NEWLINE_CONT None
793	BUILD_MAP         None
796	STORE_FAST        'styleConfig'
799	JUMP_FORWARD      '803'
802	END_FINALLY       None
803_0	COME_FROM         '766'
803_1	COME_FROM         '802'
803	JUMP_FORWARD      '806'
806_0	COME_FROM         '803'
806	LOAD_FAST         'globalConfig'
809	LOAD_ATTR         'copy'
812	CALL_FUNCTION_0   None
815	LOAD_FAST         'self'
818	STORE_ATTR        '__for_dumps'
821	LOAD_FAST         'globalConfig'
824	LOAD_ATTR         'update'
827	LOAD_FAST         'styleConfig'
830	CALL_FUNCTION_1   None
833	POP_TOP           None
834	LOAD_FAST         'globalConfig'
837	LOAD_FAST         'self'

840	STORE_ATTR        '__config'
843	LOAD_FAST         'styleLoaded'

846	POP_JUMP_IF_FALSE '859'
849	LOAD_FAST         'globalConfig'
852	LOAD_CONST        'enable'
855	BINARY_SUBSCR     None
856	JUMP_FORWARD      '862'
859	LOAD_GLOBAL       'False'
862_0	COME_FROM         '856'
862	LOAD_FAST         'self'
865	LOAD_ATTR         '__config'

868	LOAD_CONST        'enable'
871	STORE_SUBSCR      None
872	LOAD_FAST         'styleLoaded'
875	POP_JUMP_IF_FALSE '888'
878	LOAD_FAST         'globalConfig'
881	LOAD_CONST        'debug'
884	BINARY_SUBSCR     None
885	JUMP_FORWARD      '891'
888	LOAD_GLOBAL       'False'
891_0	COME_FROM         '885'
891	LOAD_FAST         'self'
894	LOAD_ATTR         '__config'
897	LOAD_CONST        'debug'
900	STORE_SUBSCR      None
901	LOAD_FAST         'self'
904	LOAD_ATTR         '__config'
907	LOAD_CONST        'displayType'
910	BINARY_SUBSCR     None
911	LOAD_CONST        1
914	COMPARE_OP        '=='
917	POP_JUMP_IF_FALSE '926'
920	LOAD_GLOBAL       'False'
923	JUMP_FORWARD      '929'
926	LOAD_GLOBAL       'True'
929_0	COME_FROM         '923'
929	LOAD_FAST         'self'
932	STORE_ATTR        'guiShomMaximal'

Syntax error at or near `POP_BLOCK' token at offset 291

    def __hooked_showFlagCaptured(self, baseClass, baseFunc):
        baseFunc(baseClass)
        if self.__config['enable'] and self.__cache['battle']['inited']:
            self.__cache['fallout']['flagCaptured'] += 1.0
            self.updateFlashData()

    def __hooked_showFlagDelivered(self, baseClass, baseFunc):
        baseFunc(baseClass)
        if self.__config['enable'] and self.__cache['battle']['inited']:
            self.__cache['fallout']['flagDelivered'] += 1.0
            self.updateFlashData()

    def __hooked_showFlagAbsorbed(self, baseClass, baseFunc):
        baseFunc(baseClass)
        if self.__config['enable'] and self.__cache['battle']['inited']:
            self.__cache['fallout']['flagAbsorbed'] += 1.0
            self.updateFlashData()

    def __hooked_showFlagDropped(self, baseClass, baseFunc):
        baseFunc(baseClass)
        if self.__config['enable'] and self.__cache['battle']['inited']:
            self.__cache['fallout']['flagDropped'] += 1.0
            self.updateFlashData()

    def __hooked_updateVehicleInteractiveStats(self, baseClass, baseFunc, iStats):
        baseFunc(baseClass, iStats)
        if self.__config['enable'] and self.__cache['battle']['inited']:
            data = self.getBattleData()
            if data is None:
                return None
            else:
                arena, player, vehicles = data
            place_all = [0]
            player_winpoints = 0
            for (vID, _), iStat in iStats.iteritems():
                vStatsVO = baseClass._ArenaDataProvider__viStatsVOs[vID]
                if vID == player.playerVehicleID:
                    self.__cache['fallout']['stat_xp'] = vStatsVO.xp
                    self.__cache['fallout']['stat_damageDealt'] = vStatsVO.damageDealt
                    self.__cache['fallout']['stat_capturePts'] = vStatsVO.capturePts
                    self.__cache['fallout']['stat_winPoints'] = vStatsVO.winPoints
                    self.__cache['fallout']['stat_deathCount'] = vStatsVO.deathCount
                    self.__cache['fallout']['stat_resourceAbsorbed'] = vStatsVO.resourceAbsorbed
                    self.__cache['fallout']['stat_equipmentDamage'] = vStatsVO.equipmentDamage
                    self.__cache['fallout']['stat_equipmentKills'] = vStatsVO.equipmentKills
                    player_winpoints = vStatsVO.winPoints
                place_all.append(vStatsVO.winPoints)

            self.__cache['fallout']['place_winPoints'] = int(sorted(place_all, reverse=True).index(player_winpoints))
            self.updateFlashData()

    def __hooked_onFlagDroppedToGround(self, baseClass, baseFunc, flagID, flagTeam, loserVehicleID, flagPos, respawnTime):
        baseFunc(baseClass, flagID, flagTeam, loserVehicleID, flagPos, respawnTime)
        if self.__config['enable'] and self.__cache['battle']['inited']:
            self.__cache['fallout']['flagDroppedToGround_debug'] = [loserVehicleID, BigWorld.time()]

    def __hooked_showTimer(self, baseClass, baseFunc, time, state, title, description):
        baseFunc(baseClass, time, state, title, description)

        def updateHP():
            self.__cache['player']['tankCurrentHealth'] = int(BigWorld.entity(BigWorld.player().playerVehicleID).health)

        if state == 'progress':
            BigWorld.callback(time + 0.01, updateHP)

    def __hooked_movingToRespawn(self, baseClass, baseFunc):
        baseFunc(baseClass)

        def updateHP():
            self.__cache['player']['tankCurrentHealth'] = int(BigWorld.entity(BigWorld.player().playerVehicleID).health)

        BigWorld.callback(0.1, updateHP)

    def __hooked_showBattle(self, baseClass, baseFunc, arenaGuiType):

    def __hooked_destroyBattle(self, baseClass, baseFunc):
        baseFunc(baseClass)
        try:
            if self.__config['enable'] and self.__cache['battle']['inited']:
                self.potapovFlash.destroy()
            self.clearCache()
        except Exception as error:
            print '[ERROR] [POTAPOV] onDestroyBattleGUI', error

    def __hooked_setVisible(self, baseClass, baseFunc, flag):
        try:
            if self.__config['enable'] and self.__cache['battle']['inited']:
                self.potapovFlash.canShow = flag
                self.potapovFlash.as_setVisible(self.potapovFlash.visible)
        except Exception as error:
            print '[ERROR] [POTAPOV] setVisible', error

        return baseFunc(baseClass, flag)

    def __hooked_notifyVehicleStart(self, baseClass, baseFunc, vProxy, vInfo, guiProps):
        try:
            if self.__config['enable'] and self.__cache['battle']['inited']:
                self.tankList[vInfo.vehicleID]['observed'] = True
        except Exception as error:
            print '[ERROR] [POTAPOV] notifyVehicleStart', error

        return baseFunc(baseClass, vProxy, vInfo, guiProps)

    def __hooked_onPeriodChange(self, baseFunc, baseClass, period, endTime, length, *args):
        try:
            if not self.__config['enable']:
                return baseFunc(baseClass, period, endTime, length, *args)
            self.__cache['battle']['period'] = period
            self.__cache['battle']['length'] = length
        except Exception as error:
            print '[ERROR] [POTAPOV] onPeriodChange', error

        return baseFunc(baseClass, period, endTime, length, *args)

    def __hooked_setTotalTime(self, baseClass, baseFunc, level, totalTime):
        try:
            if not self.__config['enable']:
                return baseFunc(baseClass, level, totalTime)
            self.__cache['battle']['currentTime'] = totalTime
        except Exception as error:
            print '[ERROR] [POTAPOV] setTotalTime', error

        return baseFunc(baseClass, level, totalTime)

    def __hooked_onBattleEvent(self, baseClass, baseFunc, eventType, details):
        try:
            if not self.__config['enable'] or not self.__cache['battle']['inited']:
                return baseFunc(baseClass, eventType, details)
            data = self.getBattleData()
            if data is None:
                return baseFunc(baseClass, prereqs)
            else:
                arena, player, vehicles = data
            if eventType == BATTLE_EVENT_TYPE.BASE_CAPTURE_DROPPED:
                self.__cache['player']['dropped_capture'] += int(str(details).replace('[', '').replace('L]', ''))
                self.updateFlashData()
            elif eventType == BATTLE_EVENT_TYPE.BASE_CAPTURE_POINTS:
                self.__cache['player']['capture_points'] += int(str(details).replace('[', '').replace('L]', ''))
                self.updateFlashData()
            elif eventType == BATTLE_EVENT_TYPE.SPOTTED:
                for vehicleID in details:
                    self.__cache['player']['spotted_enemys'] += 1
                    self.__cache['player']['spotted_enemys_ids'].append(int(vehicleID))

                self.updateFlashData()
            elif eventType == BATTLE_EVENT_TYPE.RADIO_HIT_ASSIST:
                for r in details:
                    attackerID = r & 4294967295L
                    victimID = r >> 32 & 4294967295L
                    self.__cache['player']['radio_damage_counter'] += 1
                    self.__cache['player']['radio_damage_counter_ids'].append(int(victimID))
                    if int(victimID) not in self.__cache['player']['radio_damage_counter_ids_uniq']:
                        self.__cache['player']['radio_damage_counter_ids_uniq'].append(int(victimID))
                    if int(victimID) not in self.__cache['player']['radio_track_damage_counter_ids_uniq']:
                        self.__cache['player']['radio_track_damage_counter_ids_uniq'].append(int(victimID))

                self.updateFlashData()
            elif eventType == BATTLE_EVENT_TYPE.TRACK_ASSIST:
                for r in details:
                    attackerID = r & 4294967295L
                    victimID = r >> 32 & 4294967295L
                    if int(victimID) not in self.__cache['player']['track_damage_counter_ids_uniq']:
                        self.__cache['player']['track_damage_counter_ids_uniq'].append(int(victimID))
                    if int(victimID) not in self.__cache['player']['radio_track_damage_counter_ids_uniq']:
                        self.__cache['player']['radio_track_damage_counter_ids_uniq'].append(int(victimID))

                self.updateFlashData()
            elif eventType == BATTLE_EVENT_TYPE.RADIO_KILL_ASSIST:
                for r in details:
                    attackerID = r & 4294967295L
                    victimID = r >> 32 & 4294967295L
                    self.__cache['player']['radio_kill_counter'] += 1
                    self.__cache['player']['radio_kill_counter_ids'].append(int(victimID))
                    if int(victimID) not in self.__cache['player']['radio_damage_counter_ids_uniq']:
                        self.__cache['player']['radio_damage_counter_ids_uniq'].append(int(victimID))
                    if int(victimID) not in self.__cache['player']['radio_track_damage_counter_ids_uniq']:
                        self.__cache['player']['radio_track_damage_counter_ids_uniq'].append(int(victimID))

                self.updateFlashData()
        except Exception as error:
            print '[ERROR] [POTAPOV] onBattleEvent', error

        return baseFunc(baseClass, eventType, details)

    def __hooked_onEnterWorld(self, baseClass, baseFunc, prereqs):
        try:
            if not self.__config['enable'] or not self.__cache['battle']['inited']:
                return baseFunc(baseClass, prereqs)
            data = self.getBattleData()
            if data is None:
                return baseFunc(baseClass, prereqs)
            else:
                arena, player, vehicles = data
            if self.__cache['battle']['inited']:
                for key, vehicle in vehicles.iteritems():
                    if vehicle['name'] == baseClass.publicInfo.name:
                        if key in self.tankList:
                            self.tankList[key]['currentHealth'] = int(BigWorld.entity(key).health) if BigWorld.entity(key).isCrewActive else 0
                            if self.tankList[key]['currentHealth'] < 0:
                                self.tankList[key]['currentHealth'] = 0
                            self.tankList[key] = {}
                            self.tankList[key]['currentHealth'] = int(BigWorld.entity(key).health) if BigWorld.entity(key).isCrewActive else 0
                            self.tankList[key]['team'] = vehicle['team']
                            self.tankList[key]['maxHealth'] = int(vehicle['vehicleType'].maxHealth)
                            self.tankList[key]['battleID'] = key
                            self.tankList[key]['observed'] = False
                            self.tankList[key]['kills'] = 0
                            self.tankList[key]['isAlive'] = True if self.tankList[key]['currentHealth'] > 0 else False
                            self.tankList[key]['piersiedHits'] = 0
                            self.tankList[key]['damageDealt'] = 0
                            self.tankList[key]['teamHits'] = 0
                            break

        except Exception as error:
            print '[ERROR] [POTAPOV] onEnterWorld', error

        return baseFunc(baseClass, prereqs)

    def __hooked_onHealthChanged(self, baseClass, baseFunc, newHealth, attackerID, attackReasonID):
        try:
            if not self.__config['enable'] or not self.__cache['battle']['inited']:
                return baseFunc(baseClass, newHealth, attackerID, attackReasonID)
            data = self.getBattleData()
            if data is None:
                return baseFunc(baseClass, newHealth, attackerID, attackReasonID)
            else:
                arena, player, vehicles = data
            if self.__cache['player']['squad_id'] == 0:
                self.__cache['player']['squad_id'] = vehicles[player.playerVehicleID]['prebattleID']
            victimID = baseClass.id
            if attackerID == 0:
                self.tankList[victimID]['currentHealth'] = newHealth if newHealth >= 0 else 0
                return baseFunc(baseClass, newHealth, attackerID, attackReasonID)
            if self.tankList[victimID]['team'] != self.tankList[attackerID]['team']:
                if newHealth >= 0:
                    damageDealt = self.tankList[victimID]['currentHealth'] - newHealth
                else:
                    damageDealt = self.tankList[victimID]['currentHealth']
                if self.tankList[attackerID]['team'] == self.tankList[player.playerVehicleID]['team']:
                    self.__cache['player']['teamdamage'] += damageDealt
                self.tankList[attackerID]['damageDealt'] += damageDealt
                if attackReasonID == 0:
                    self.tankList[attackerID]['piersiedHits'] += 1
                if attackerID == player.playerVehicleID:
                    if attackReasonID == 2:
                        self.__cache['player']['damage']['any_ramming'] += damageDealt
                    ENEMY_LEVEL = self.getVehicleLevel(vehicles[victimID])
                    ENEMY_TYPE = self.getVehicleType(vehicles[victimID])
                    PLAYER_LEVEL = self.getVehicleLevel(vehicles[player.playerVehicleID])
                    DISTANCE = self.getEnemyDistance(attackerID, victimID)
                    if DISTANCE < self.tankList[attackerID]['circularVisionRadius']:
                        self.__cache['player']['damage']['in_circularVisionRadius'] += damageDealt
                    if DISTANCE >= 250:
                        self.__cache['player']['damage']['more_250m'] += damageDealt
                    if DISTANCE >= 200:
                        self.__cache['player']['damage']['more_200m'] += damageDealt
                    if DISTANCE <= 100:
                        self.__cache['fallout']['damageLess100m'] += damageDealt
                    if DISTANCE <= 150:
                        self.__cache['fallout']['damageLess150m'] += damageDealt
                    self.__cache['player']['damage']['any'] += damageDealt
                    self.__cache['player']['damage'][ENEMY_TYPE] += damageDealt
                    if ENEMY_LEVEL > PLAYER_LEVEL:
                        self.__cache['player']['damage']['any_lvlup'] += damageDealt
                        self.__cache['player']['damage'][ENEMY_TYPE + '_lvlup'] += damageDealt
                    if ENEMY_LEVEL == PLAYER_LEVEL:
                        self.__cache['player']['damage']['any_lvl'] += damageDealt
                        self.__cache['player']['damage'][ENEMY_TYPE + '_lvl'] += damageDealt
                    if self.__cache['battle']['length'] - self.__cache['battle']['currentTime'] <= 120:
                        self.__cache['player']['damage']['in_2_min'] += damageDealt
                    if victimID in self.__cache['player']['track_ids'] and self.tankList[attackerID]['team'] == vehicles[player.playerVehicleID]['team']:
                        self.__cache['player']['damage']['track_by_alies'] += damageDealt
                        if victimID not in self.__cache['player']['damage']['track_by_alies_ids']:
                            self.__cache['player']['damage']['track_by_alies_ids'].append(victimID)
                        if vehicles[attackerID]['prebattleID'] != 0 and vehicles[attackerID]['prebattleID'] == vehicles[player.playerVehicleID]['prebattleID']:
                            ENEMY_TYPE = self.getVehicleType(vehicles[victimID])
                            self.__cache['squad']['damage_any'] += damageDealt
                            self.__cache['squad']['damage_' + ENEMY_TYPE] += damageDealt
                        self.tankList[attackerID]['teamHits'] += 1
                        self.tankList[victimID]['currentHealth'] = newHealth if newHealth >= 0 else 0
                        if victimID == player.playerVehicleID:
                            self.__cache['fallout']['takenDamage'] += self.__cache['player']['tankCurrentHealth'] - self.tankList[victimID]['currentHealth']
                            self.__cache['player']['tankCurrentHealth'] = self.tankList[victimID]['currentHealth']
                        playerDamage = self.tankList[player.playerVehicleID]['damageDealt']
                        playerTeamId = self.tankList[player.playerVehicleID]['team']
                        teamPlace = 1
                        allPlace = 1
                        for key, veh in self.tankList.iteritems():
                            if veh['team'] == playerTeamId and veh['battleID'] != player.playerVehicleID and veh['damageDealt'] >= playerDamage:
                                teamPlace += 1
                                allPlace += 1
                            if veh['team'] != playerTeamId and veh['damageDealt'] >= playerDamage:
                                allPlace += 1

                        self.__cache['player']['damage']['team_place'] = teamPlace
                        self.__cache['player']['damage']['all_place'] = allPlace
                        if baseClass.isPlayerVehicle and baseClass.isStarted and player.team != self.tankList[attackerID]['team'] and str(attackerID) in self.__cache['player']['armorResist']['hits']:
                            self.__cache['player']['armorResist']['hits'][str(attackerID)]['hpChanged'] = True
            self.updateFlashData()
        except:
            print '[ERROR] [POTAPOV] onHealthChanged',
            import traceback
            traceback.print_exc()

        return baseFunc(baseClass, newHealth, attackerID, attackReasonID)

    def __hooked_onVehicleKilled(self, baseClass, baseFunc, argStr):
        try:
            if not self.__config['enable'] or not self.__cache['battle']['inited']:
                return baseFunc(baseClass, argStr)
            data = self.getBattleData()
            if data is None:
                return baseFunc(baseClass, argStr)
            else:
                arena, player, vehicles = data
            victimID, killerID, _, reason = cPickle.loads(argStr)
            if victimID == player.playerVehicleID:
                self.__cache['player']['alive'] = False
            if vehicles[killerID]['team'] == vehicles[victimID]['team']:
                self.tankList[killerID]['teamHits'] += 1
            else:
                if self.tankList[killerID]['team'] == self.tankList[player.playerVehicleID]['team']:
                    self.__cache['player']['teamdamage'] += self.tankList[victimID]['currentHealth']
                if killerID == player.playerVehicleID:
                    fallout_v, fallout_t = self.__cache['fallout']['flagDroppedToGround_debug']
                    if fallout_v == victimID and BigWorld.time() - fallout_t < 1:
                        self.__cache['fallout']['flagDroppedToGround'] += 1
                    if victimID in self.__cache['player']['track_ids']:
                        self.__cache['player']['kill']['counter_track'] += 1
                    if reason == 2:
                        self.__cache['player']['kill']['counter_ramming'] += 1
                        if self.getVehicleLevel(vehicles[victimID]) > self.getVehicleLevel(vehicles[killerID]):
                            self.__cache['player']['kill']['counter_ramming_lvlup'] += 1
                        if vehicles[killerID]['isAlive']:
                            self.__cache['player']['kill']['ramming_live'] = 2
                        elif self.__cache['player']['kill']['ramming_live'] == 0:
                            self.__cache['player']['kill']['ramming_live'] = 1
                        if self.getVehicleLevel(vehicles[victimID]) >= self.getVehicleLevel(vehicles[player.playerVehicleID]):
                            self.__cache['player']['kill']['counter_any_lvl'] += 1
                        if not self.tankList[victimID]['observed']:
                            self.__cache['player']['kill']['counter_spg_nonspotted'] += 1
                        if self.__cache['battle']['length'] - self.__cache['battle']['currentTime'] <= 120:
                            self.__cache['fallout']['killedIn2Min'] += 1.0
                        if BigWorld.entity(victimID) is None:
                            damageDealt = self.tankList[victimID]['currentHealth']
                            if reason == 2:
                                self.__cache['player']['damage']['any_ramming'] += damageDealt
                            ENEMY_LEVEL = self.getVehicleLevel(vehicles[victimID])
                            ENEMY_TYPE = self.getVehicleType(vehicles[victimID])
                            PLAYER_LEVEL = self.getVehicleLevel(vehicles[player.playerVehicleID])
                            self.__cache['player']['damage']['any'] += damageDealt
                            self.__cache['player']['damage'][ENEMY_TYPE] += damageDealt
                            if ENEMY_LEVEL > PLAYER_LEVEL:
                                self.__cache['player']['damage']['any_lvlup'] += damageDealt
                                self.__cache['player']['damage'][ENEMY_TYPE + '_lvlup'] += damageDealt
                            if ENEMY_LEVEL == PLAYER_LEVEL:
                                self.__cache['player']['damage']['any_lvl'] += damageDealt
                                self.__cache['player']['damage'][ENEMY_TYPE + '_lvl'] += damageDealt
                            if self.__cache['battle']['length'] - self.__cache['battle']['currentTime'] <= 120:
                                self.__cache['player']['damage']['in_2_min'] += damageDealt
                            self.tankList[victimID]['currentHealth'] = 0
                        if victimID in self.__cache['player']['track_ids'] and self.tankList[killerID]['team'] == vehicles[player.playerVehicleID]['team']:
                            self.__cache['player']['kill']['track_by_alies'] += 1
                        if killerID in self.tankList.keys() and victimID in self.tankList.keys():
                            self.tankList[killerID]['kills'] += 1
                            self.tankList[killerID]['damageDealt'] += self.tankList[victimID]['currentHealth']
                            if reason == 0 and killerID in self.tankList.keys():
                                self.tankList[killerID]['piersiedHits'] += 1
                            self.tankList[victimID]['currentHealth'] = 0
                        if vehicles[killerID]['prebattleID'] != 0 and vehicles[killerID]['prebattleID'] == vehicles[player.playerVehicleID]['prebattleID']:
                            ENEMY_TYPE = self.getVehicleType(vehicles[victimID])
                            if self.__cache['battle']['length'] - self.__cache['battle']['currentTime'] <= 180:
                                self.__cache['squad']['kill_in_3_min'] += 1
                            self.__cache['squad']['kill_any'] += 1
                            self.__cache['squad']['kill_' + ENEMY_TYPE] += 1
            playerDamage = self.tankList[player.playerVehicleID]['damageDealt']
            playerTeamId = self.tankList[player.playerVehicleID]['team']
            teamPlace = 1
            allPlace = 1
            for key, veh in self.tankList.iteritems():
                if veh['team'] == playerTeamId and veh['battleID'] != player.playerVehicleID and veh['damageDealt'] >= playerDamage:
                    teamPlace += 1
                    allPlace += 1
                if veh['team'] != playerTeamId and veh['damageDealt'] >= playerDamage:
                    allPlace += 1

            self.__cache['player']['damage']['team_place'] = teamPlace
            self.__cache['player']['damage']['all_place'] = allPlace
            self.updateFlashData()
        except Exception as error:
            print '[ERROR] [POTAPOV] onVehicleKilled', error

        return baseFunc(baseClass, argStr)

    def __hooked_showSixthSenseIndicator(self, baseClass, baseFunc, isShow):
        try:
            if not self.__config['enable'] or not self.__cache['battle']['inited']:
                return baseFunc(baseClass, isShow)
            self.__cache['player']['observed'] = True

            def clearTimer():
                self.__cache['player']['observed_timer'] = False

            if self.__cache['player']['observed_timer']:
                BigWorld.cancelCallback(self.__cache['player']['observed_timer_callback_id'])
            self.__cache['player']['observed_timer'] = True
            self.__cache['player']['observed_timer_callback_id'] = BigWorld.callback(10, clearTimer)
            self.updateFlashData()
        except Exception as error:
            print '[ERROR] [POTAPOV] showSixthSenseIndicator',
            print error

        return baseFunc(baseClass, isShow)

    def __hooked_showShotResults(self, baseClass, baseFunc, results):
        try:
            if not self.__config['enable'] or not self.__cache['battle']['inited']:
                return baseFunc(baseClass, results)
            data = self.getBattleData()
            if data is None:
                return baseFunc(baseClass, results)
            else:
                arena, player, vehicles = data
            DOUBLE_KILLS = 0
            DOUBLE_DEMAGES = 0
            for r in results:
                vehicleID = r & 4294967295L
                flags = r >> 32 & 4294967295L
                DAMAGE_HP = False
                DAMAGE_DEVICE = False
                KILLED = False
                ENEMY_LEVEL = self.getVehicleLevel(vehicles[vehicleID])
                ENEMY_TYPE = self.getVehicleType(vehicles[vehicleID])
                PLAYER_LEVEL = self.getVehicleLevel(vehicles[baseClass.playerVehicleID])
                DISTANCE = self.getEnemyDistance(baseClass.playerVehicleID, vehicleID)
                if baseClass.playerVehicleID == vehicleID:
                    continue
                if flags & VEHICLE_HIT_FLAGS.VEHICLE_WAS_DEAD_BEFORE_ATTACK:
                    continue
                if vehicleID not in vehicles:
                    continue
                if baseClass.team == vehicles[vehicleID]['team']:
                    continue
                if flags & VEHICLE_HIT_FLAGS.VEHICLE_KILLED:
                    KILLED = True
                if flags & VEHICLE_HIT_FLAGS.MATERIAL_WITH_POSITIVE_DF_PIERCED_BY_PROJECTILE or flags & VEHICLE_HIT_FLAGS.MATERIAL_WITH_POSITIVE_DF_PIERCED_BY_EXPLOSION:
                    DAMAGE_HP = True
                if flags & VEHICLE_HIT_FLAGS.MATERIAL_WITH_POSITIVE_DF_PIERCED_BY_PROJECTILE:
                    self.__cache['player']['direct_shots'] += 1
                if flags & VEHICLE_HIT_FLAGS.DEVICE_DAMAGED_BY_PROJECTILE or flags & VEHICLE_HIT_FLAGS.DEVICE_DAMAGED_BY_EXPLOSION:
                    DAMAGE_DEVICE = True
                if DAMAGE_DEVICE:
                    self.__cache['player']['damage']['counter_devices'] += 1
                if DAMAGE_HP:
                    if not self.__cache['player']['damage']['piercing_row_finished']:
                        self.__cache['player']['damage']['piercing_row'] += 1
                    DOUBLE_DEMAGES += 1
                    self.__cache['player']['damage']['counter_any'] += 1
                    self.__cache['player']['damage']['counter_' + ENEMY_TYPE] += 1
                    if ENEMY_LEVEL >= PLAYER_LEVEL:
                        self.__cache['player']['damage']['counter_any_lvl'] += 1
                    if ENEMY_LEVEL > PLAYER_LEVEL:
                        self.__cache['player']['damage']['counter_any_lvlup'] += 1
                        self.__cache['player']['damage']['counter_' + ENEMY_TYPE + '_lvlup'] += 1
                    if self.__cache['battle']['length'] - self.__cache['battle']['currentTime'] <= 120:
                        self.__cache['player']['damage']['counter_in_2_min'] += 1
                    if vehicleID not in self.__cache['player']['damage']['counter_damage_ids']:
                        self.__cache['player']['damage']['counter_uniq_vehicles'] += 1
                        self.__cache['player']['damage']['counter_damage_ids'].append(vehicleID)
                    if DISTANCE >= 300:
                        self.__cache['player']['damage']['counter_more_300m'] += 1
                    REAL_SPEED = self.getVehicleSpeed2(vehicleID)
                    if REAL_SPEED >= 33:
                        self.__cache['player']['damage']['counter_speed_30'] += 1
                        if REAL_SPEED >= 28:
                            self.__cache['player']['damage']['counter_speed_30_bad'] += 1
                        elif REAL_SPEED >= 23:
                            self.__cache['player']['damage']['counter_speed_20'] += 1
                        elif REAL_SPEED >= 18:
                            self.__cache['player']['damage']['counter_speed_20_bad'] += 1
                        if not self.__cache['player']['damage']['piercing_row_finished']:
                            self.__cache['player']['damage']['piercing_row'] = 0
                        if flags & VEHICLE_HIT_FLAGS.FIRE_STARTED:
                            self.__cache['player']['damage']['counter_burn'] += 1
                            if ENEMY_LEVEL >= PLAYER_LEVEL:
                                self.__cache['player']['damage']['counter_burn_lvlup'] += 1
                            if (DAMAGE_HP or DAMAGE_DEVICE) and ENEMY_TYPE == 'spg' and vehicleID not in self.__cache['player']['spg_damages_id']:
                                self.__cache['player']['spg_damages_id'].append(vehicleID)
                            if flags & VEHICLE_HIT_FLAGS.CHASSIS_DAMAGED_BY_PROJECTILE or flags & VEHICLE_HIT_FLAGS.CHASSIS_DAMAGED_BY_EXPLOSION or flags & VEHICLE_HIT_FLAGS.CHASSIS_DAMAGED_BY_RAMMING:

                                def cheackCrashedTracks(vehicleID, KILLED = False, DAMAGE_HP = False, DAMAGE_DEVICE = False, First = False):

                                BigWorld.callback(0.1, partial(cheackCrashedTracks, vehicleID, KILLED, DAMAGE_HP, DAMAGE_DEVICE, True))
                            if KILLED:
                                DOUBLE_KILLS += 1
                                self.__cache['player']['kill']['counter_any'] += 1
                                self.__cache['player']['kill']['counter_' + ENEMY_TYPE] += 1
                                if ENEMY_LEVEL == PLAYER_LEVEL + 1:
                                    self.__cache['player']['kill']['counter_any_lvlup'] += 1
                                    self.__cache['player']['kill']['counter_' + ENEMY_TYPE + '_lvlup'] += 1
                                if ENEMY_LEVEL - PLAYER_LEVEL > 1:
                                    self.__cache['player']['kill']['counter_any_lvlupup'] += 1
                                    self.__cache['player']['kill']['counter_' + ENEMY_TYPE + '_lvlupup'] += 1
                                if not self.__cache['player']['observed']:
                                    self.__cache['player']['kill']['counter_not_spotted'] += 1
                                if vehicles[baseClass.playerVehicleID]['vehicleType'].maxHealth == BigWorld.entity(baseClass.playerVehicleID).health:
                                    self.__cache['player']['kill']['counter_self_full_hp'] += 1
                                if self.getVehicleSpeed(vehicleID) > 0:
                                    self.__cache['player']['kill']['counter_in_move'] += 1
                                if DISTANCE >= 300:
                                    self.__cache['player']['kill']['counter_more_300m'] += 1
                                if DISTANCE <= 100:
                                    self.__cache['player']['kill']['counter_less_100m'] += 1
                                if self.__cache['battle']['length'] - self.__cache['battle']['currentTime'] <= 180:
                                    self.__cache['player']['kill']['counter_in_3_min'] += 1
                                    self.__cache['squad']['kills']['in_3_min'] += 1
                                if self.__cache['battle']['length'] - self.__cache['battle']['currentTime'] <= 120 and ENEMY_TYPE == 'lt':
                                    self.__cache['player']['kill']['counter_in_2_min_lt'] += 1
                                if self.tankList[vehicleID]['maxHealth'] == self.tankList[vehicleID]['currentHealth']:
                                    self.__cache['player']['kill']['counter_oneshotes'] += 1

            if DOUBLE_KILLS >= 2:
                self.__cache['player']['kill']['counter_double'] += 1
                if DOUBLE_DEMAGES >= 2:
                    self.__cache['player']['damage']['counter_double'] += 1
                    if DOUBLE_KILLS > 0:
                        self.__cache['player']['damage']['counter_double_with_kill'] += 1
            self.updateFlashData()
        except Exception as error:
            print '[ERROR] [POTAPOV] showShotResults', error

        return baseFunc(baseClass, results)

    def __hooked_showDamageFromShot(self, baseClass, baseFunc, attackerID, points, effectsIndex, damageFactor):
        try:
            if not self.__config['enable'] or not self.__cache['battle']['inited']:
                return baseFunc(baseClass, attackerID, points, effectsIndex, damageFactor)
            if attackerID == 0:
                return baseFunc(baseClass, attackerID, points, effectsIndex, damageFactor)
            data = self.getBattleData()
            if data is None:
                return baseFunc(baseClass, attackerID, points, effectsIndex, damageFactor)
            else:
                arena, player, vehicles = data
            if not baseClass.isPlayerVehicle or not baseClass.isStarted or player.team == self.tankList[attackerID]['team'] or baseClass.health <= 0:
                return baseFunc(baseClass, attackerID, points, effectsIndex, damageFactor)
            self.__cache['player']['armorResist']['receivedShots'] += 1
            for shell in vehicles[attackerID]['vehicleType'].gun['shots']:
                if effectsIndex == shell['shell']['effectsIndex']:
                    dmg, _ = shell['shell']['damage']
                    type = shell['shell']['kind']
                    break

            self.__cache['player']['armorResist']['receivedDamage'] += dmg
            maxHitEffectCode, decodedPoints = DamageFromShotDecoder.decodeHitPoints(points, baseClass.typeDescriptor)
            hasPiercedHit = DamageFromShotDecoder.hasDamaged(maxHitEffectCode)
            if not decodedPoints:
                return baseFunc(baseClass, attackerID, points, effectsIndex, damageFactor)
            firstHitPoint = decodedPoints[0].matrix.translation
            firstHitDirLocal = decodedPoints[0].matrix.applyToAxis(2)
            compMatrix = Math.Matrix(baseClass.appearance.compoundModel.node(decodedPoints[0].componentName))
            firstHitDir = compMatrix.applyVector(firstHitDirLocal)
            firstHitPos = compMatrix.applyPoint(firstHitPoint)
            canHitPrimaryArmor = False
            worldToVehMatrix = Math.Matrix(baseClass.model.matrix)
            worldToVehMatrix.invert()
            startPoint = worldToVehMatrix.applyPoint(firstHitPos - firstHitDir)
            endPoint = worldToVehMatrix.applyPoint(firstHitPos + firstHitDir.scale(10.0))
            for compDescr, compMatrix, isAttached in baseClass.getComponents():
                if not isAttached:
                    continue
                collisions = compDescr['hitTester'].localHitTest(compMatrix.applyPoint(startPoint), compMatrix.applyPoint(endPoint))
                if collisions is None:
                    continue
                for dist, _, hitAngleCos, matKind in collisions:
                    matInfo = compDescr['materials'].get(matKind)
                    if matInfo is not None and matInfo.vehicleDamageFactor > 0.0:
                        canHitPrimaryArmor = True
                        break

                if canHitPrimaryArmor:
                    break

            id = str(attackerID)
            self.__cache['player']['armorResist']['hits'][id] = {'vehicleDamage': dmg,
             'vehicleShellType': type,
             'hasPiercedHit': hasPiercedHit,
             'hitEffectGroup': decodedPoints[0].hitEffectGroup,
             'componentName': decodedPoints[0].componentName,
             'canHitPrimaryArmor': canHitPrimaryArmor,
             'hpChanged': False}

            def processShot(id):

            BigWorld.callback(0.01, partial(processShot, id))
        except Exception as error:
            print '[ERROR] [POTAPOV] showDamageFromShot', error
            import traceback
            traceback.print_exc()

        return baseFunc(baseClass, attackerID, points, effectsIndex, damageFactor)

    def __hooked_handleKeyEvent(self, baseFunc, event):
        try:
            if not self.__config['enable'] or not self.__cache['battle']['inited']:
                return baseFunc(event)
            actionKeySetPressed = g_modsSettingsApi.checkKeySet(self.__config['actionKeySet'])
            if self.__config['displayType'] == 1 and self.__shomMaximalState != actionKeySetPressed:
                self.__shomMaximalState = actionKeySetPressed
                self.guiShomMaximal = actionKeySetPressed
                self.updateFlashData()
            if self.__config['displayType'] == 2 and self.potapovFlash.visible != actionKeySetPressed:
                self.potapovFlash.as_setVisible(actionKeySetPressed)
            if actionKeySetPressed and event.isKeyDown() and self.__config['displayType'] == 3:
                self.potapovFlash.canShow = not self.potapovFlash.canShow
                self.potapovFlash.as_setVisible(self.potapovFlash.canShow)
            if event.key == Keys.KEY_TAB:
                if event.isKeyDown() and not event.isRepeatedEvent():
                    self.__savedCanShow = self.potapovFlash.canShow
                    self.potapovFlash.canShow = False
                    self.potapovFlash.as_setVisible(self.potapovFlash.visible)
                elif not BigWorld.isKeyDown(Keys.KEY_TAB):
                    self.potapovFlash.canShow = self.__savedCanShow
                    self.potapovFlash.as_setVisible(self.potapovFlash.visible)
                if BigWorld.isKeyDown(Keys.KEY_LCONTROL) or BigWorld.isKeyDown(Keys.KEY_RCONTROL) and not self.__showHint:
                    self.__showHint = True
                    self.updateFlashData()
                if not BigWorld.isKeyDown(Keys.KEY_LCONTROL) and not BigWorld.isKeyDown(Keys.KEY_RCONTROL) and self.__showHint:
                    self.__showHint = False
                    self.updateFlashData()
                if event.key == Keys.KEY_F2 and self.__config['debug']:
                    self.__config['debugQuestID'] += 1
                    if self.__config['debugQuestID'] == 301:
                        self.__config['debugQuestID'] = 1
                    self.__cache['currentID'] = self.__config['debugQuestID']
                    self.subscribePotapovFunctional()
                    self.updateFlashData()
        except Exception as error:
            print '[ERROR] [POTAPOV] handleKeyEvent', error

        return baseFunc(event)

    def getBattleData--- This code section failed: ---

0	LOAD_GLOBAL       'hasattr'
3	LOAD_GLOBAL       'BigWorld'
6	LOAD_ATTR         'player'
9	CALL_FUNCTION_0   None
12	LOAD_CONST        'arena'
15	CALL_FUNCTION_2   None
18	JUMP_IF_FALSE_OR_POP '42'
21	LOAD_GLOBAL       'hasattr'
24	LOAD_GLOBAL       'BigWorld'
27	LOAD_ATTR         'player'
30	CALL_FUNCTION_0   None
33	LOAD_ATTR         'arena'
36	LOAD_CONST        'vehicles'
39	CALL_FUNCTION_2   None
42_0	COME_FROM         '18'
42	POP_JUMP_IF_FALSE '95'
45	LOAD_GLOBAL       'BigWorld'
48	LOAD_ATTR         'player'
51	CALL_FUNCTION_0   None
54	LOAD_ATTR         'arena'
57	LOAD_GLOBAL       'BigWorld'
60	LOAD_ATTR         'player'
63	CALL_FUNCTION_0   None
66	LOAD_GLOBAL       'BigWorld'
69	LOAD_ATTR         'player'
72	CALL_FUNCTION_0   None
75	LOAD_ATTR         'arena'
78	LOAD_ATTR         'vehicles'
81	BUILD_TUPLE_3     None
84	RETURN_VALUE      None
85	JUMP_FORWARD      '91'
88	LOAD_CONST        None
91_0	COME_FROM         '85'
91	RETURN_VALUE      None
92	JUMP_FORWARD      '95'
95_0	COME_FROM         '92'
95	LOAD_GLOBAL       'None'
98	RETURN_VALUE      None
-1	RETURN_LAST       None

Syntax error at or near `COME_FROM' token at offset 91_0

    def getVehicleType(self, vehData):

    def getVehicleLevel(self, vehData):
        if 'vehicleType' not in vehData or vehData['vehicleType'] is None:
            return 1
        try:
            return vehData['vehicleType'].type.level
        except:
            return 1

    def getVehicleSpeed2(self, vehicleID):
        try:
            return int(BigWorld.entity(vehicleID).filter.speedInfo.value[0] * 3.6)
        except:
            return 0

    def getVehicleSpeed(self, vehicleID):
        try:
            return BigWorld.entity(vehicleID).appearance.detailedEngineState.rpm
        except:
            return 0

    def getEnemyDistance(self, playerID, enemyID):
        try:
            return int((BigWorld.entity(playerID).position - BigWorld.entity(enemyID).position).length)
        except:
            return -1

    def clearCache(self):
        if self.__config['displayPosOffsetX'] != self.__for_dumps['displayPosOffsetX'] or self.__config['displayPosOffsetY'] != self.__for_dumps['displayPosOffsetY']:
            self.__for_dumps['displayPosOffsetX'] = self.__config['displayPosOffsetX']
            self.__for_dumps['displayPosOffsetY'] = self.__config['displayPosOffsetY']
            if IS_PROTANKI:
                with codecs.open('/'.join([WOT_INFO.GUI_MODS, 'mod_pro_potapov', 'pro_potapov.ptc']), 'w+', 'utf-8-sig') as fh:
                    fh.write(json.dumps(self.__for_dumps, ensure_ascii=False, indent=4, separators=(',', ': '), sort_keys=True))
            else:
                with codecs.open('/'.join([WOT_INFO.GUI_MODS, 'mod_potapov', 'potapov.json']), 'w+', 'utf-8-sig') as fh:
                    fh.write(json.dumps(self.__for_dumps, ensure_ascii=False, indent=4, separators=(',', ': '), sort_keys=True))
        self.__showHint = False
        self.__shomMaximalState = False
        self.__prevFlashData = ''
        self.__savedCanShow = False
        self.__cache = {'isColorBlind': False,
         'currentID': -1,
         'player': {'kill': {'counter_spg_nonspotted': 0,
                             'counter_oneshotes': 0,
                             'counter_less_100m': 0,
                             'counter_more_300m': 0,
                             'counter_in_move': 0,
                             'counter_self_full_hp': 0,
                             'counter_not_spotted': 0,
                             'counter_double': 0,
                             'counter_any_lvl': 0,
                             'counter_any': 0,
                             'counter_any_lvlup': 0,
                             'counter_any_lvlupup': 0,
                             'counter_lt': 0,
                             'counter_mt': 0,
                             'counter_ht': 0,
                             'counter_spg': 0,
                             'counter_atspg': 0,
                             'counter_observer': 0,
                             'counter_lt_lvlup': 0,
                             'counter_mt_lvlup': 0,
                             'counter_ht_lvlup': 0,
                             'counter_spg_lvlup': 0,
                             'counter_atspg_lvlup': 0,
                             'counter_observer_lvlup': 0,
                             'counter_lt_lvlupup': 0,
                             'counter_mt_lvlupup': 0,
                             'counter_ht_lvlupup': 0,
                             'counter_spg_lvlupup': 0,
                             'counter_atspg_lvlupup': 0,
                             'counter_observer_lvlupup': 0,
                             'counter_in_3_min': 0,
                             'counter_in_2_min_lt': 0,
                             'counter_ramming': 0,
                             'counter_ramming_lvlup': 0,
                             'counter_track': 0,
                             'track_by_alies': 0,
                             'ramming_live': 0},
                    'damage': {'track_by_alies': 0,
                               'track_by_alies_ids': [],
                               'counter_double_with_kill': 0,
                               'counter_track_ids_uniq': [],
                               'piercing_row': 0,
                               'piercing_row_finished': False,
                               'counter_more_300m': 0,
                               'counter_burn_lvlup': 0,
                               'counter_burn': 0,
                               'counter_any': 0,
                               'counter_any_lvl': 0,
                               'counter_any_lvlup': 0,
                               'counter_double': 0,
                               'counter_lt': 0,
                               'counter_mt': 0,
                               'counter_ht': 0,
                               'counter_spg': 0,
                               'counter_atspg': 0,
                               'counter_observer': 0,
                               'counter_lt_lvlup': 0,
                               'counter_mt_lvlup': 0,
                               'counter_ht_lvlup': 0,
                               'counter_spg_lvlup': 0,
                               'counter_atspg_lvlup': 0,
                               'counter_observer_lvlup': 0,
                               'counter_in_2_min': 0,
                               'counter_track_damage': 0,
                               'counter_uniq_track': 0,
                               'counter_track': 0,
                               'counter_track_ids': [],
                               'counter_damage_ids': [],
                               'counter_uniq_vehicles': 0,
                               'more_250m': 0,
                               'more_200m': 0,
                               'burn_lvlup': 0,
                               'burn': 0,
                               'any': 0,
                               'any_lvl': 0,
                               'any_lvlup': 0,
                               'double': 0,
                               'lt': 0,
                               'mt': 0,
                               'ht': 0,
                               'spg': 0,
                               'atspg': 0,
                               'observer': 0,
                               'lt_lvlup': 0,
                               'mt_lvlup': 0,
                               'ht_lvlup': 0,
                               'spg_lvlup': 0,
                               'atspg_lvlup': 0,
                               'observer_lvlup': 0,
                               'lt_lvl': 0,
                               'mt_lvl': 0,
                               'ht_lvl': 0,
                               'spg_lvl': 0,
                               'atspg_lvl': 0,
                               'observer_lvl': 0,
                               'in_2_min': 0,
                               'track': 0,
                               'counter_devices': 0,
                               'in_circularVisionRadius': 0,
                               'team_place': 15,
                               'all_place': 30,
                               'any_ramming': 0,
                               'self_full_hp': 0,
                               'counter_speed_30': 0,
                               'counter_speed_30_bad': 0,
                               'counter_speed_20': 0,
                               'counter_speed_20_bad': 0},
                    'armorResist': {'receivedShots': 0,
                                    'receivedDamage': 0,
                                    'resistedShots': 0,
                                    'resistedDamage': 0,
                                    'hits': {}},
                    'alive': True,
                    'observed': False,
                    'observed_timer': False,
                    'observed_timer_callback_id': -1,
                    'squad_id': 0,
                    'dropped_capture': 0,
                    'capture_points': 0,
                    'spotted_enemys': 0,
                    'spotted_enemys_ids': [],
                    'track_asist': 0,
                    'radio_kill': 0,
                    'radio_damage_counter': 0,
                    'radio_damage_counter_ids': [],
                    'radio_kill_counter': 0,
                    'radio_kill_counter_ids': [],
                    'radio_damage_counter_ids_uniq': [],
                    'track_damage_counter_ids_uniq': [],
                    'radio_track_damage_counter_ids_uniq': [],
                    'tankMaxHealth': 0,
                    'tankCurrentHealth': 0,
                    'track_ids': [],
                    'teamdamage': 1,
                    'direct_shots': 0,
                    'spg_damages_id': []},
         'squad': {'kill_in_3_min': 0,
                   'kill_any': 0,
                   'kill_lt': 0,
                   'kill_mt': 0,
                   'kill_ht': 0,
                   'kill_spg': 0,
                   'kill_atspg': 0,
                   'kill_observer': 0,
                   'damage_any': 0,
                   'damage_ht': 0,
                   'damage_mt': 0,
                   'damage_lt': 0,
                   'damage_spg': 0,
                   'damage_atspg': 0,
                   'damage_observer': 0,
                   'counter_any': 0,
                   'counter_ht': 0,
                   'counter_mt': 0,
                   'counter_lt': 0,
                   'counter_spg': 0,
                   'counter_atspg': 0,
                   'counter_observer': 0,
                   'kills': {'in_3_min': 0},
                   'damage': 0,
                   'kills_types': [],
                   'kills_levels': [],
                   'damage_types': [],
                   'damage_levels': []},
         'battle': {'inited': False,
                    'currentTime': -1,
                    'length': -1,
                    'period': -1,
                    'winner': -1},
         'fallout': {'damageLess100m': 0.0,
                     'damageLess150m': 0.0,
                     'flagAbsorbed': 0.0,
                     'flagCaptured': 0.0,
                     'flagDelivered': 0.0,
                     'flagDropped': 0.0,
                     'flagDroppedToGround': 0.0,
                     'flagDroppedToGround_debug': [0, 0],
                     'killedIn2Min': 0.0,
                     'place_winPoints': 0.0,
                     'stat_xp': 0.0,
                     'stat_damageDealt': 0.0,
                     'stat_capturePts': 0.0,
                     'stat_winPoints': 0.0,
                     'stat_deathCount': 0.0,
                     'stat_resourceAbsorbed': 0.0,
                     'stat_equipmentDamage': 0.0,
                     'stat_equipmentKills': 0.0,
                     'takenDamage': 0.0}}

    def subscribePotapovFunctional(self):
        """ На случай если ID квеста не в range(1, 315) + range(401, 415) """

        def <lambda.107>(quest):
            return ([], [])

        ' ТТ '
        ' StuG IV'
        if self.__cache['currentID'] == 16:

            def quest_16(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_16
        if self.__cache['currentID'] == 17:

            def quest_17(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_less_100m']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_17
        if self.__cache['currentID'] == 18:

            def quest_18(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any']
                data_2 = 0
                data_3 = self.__cache['player']['damage']['any']
                if self.__cache['player']['kill']['counter_lt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_mt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_ht'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_spg'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_atspg'] > 0:
                    data_2 += 1
                cond_1 = '{{done}}' if data_1 >= 2 and data_2 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_3 >= 1000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_18
        if self.__cache['currentID'] == 19:

            def quest_19(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_devices']
                data_2 = self.__cache['player']['alive']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if data_2 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_19
        if self.__cache['currentID'] == 20:

            def quest_20(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['in_circularVisionRadius']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 1000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_20
        if self.__cache['currentID'] == 21:

            def quest_21(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_ht']
                data_2 = self.__cache['player']['alive']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}' if data_2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_21
        if self.__cache['currentID'] == 22:

            def quest_22(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['capture_points']
                data_2 = self.__cache['player']['dropped_capture']
                data_3 = self.__cache['player']['damage']['any']
                data_4 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_2 > 0 or data_1 > 0 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{done}}' if data_3 >= 1000 else '{{notDone}}'
                cond_4 = '{{done}}' if data_4 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                main_list.append(quest['main'][2].replace('{state}', str(cond_3)).replace('{counter}', str(data_3)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_22
        if self.__cache['currentID'] == 23:

            def quest_23(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 1000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_23
        if self.__cache['currentID'] == 24:

            def quest_24(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_ramming'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_24
        if self.__cache['currentID'] == 25:

            def quest_25(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['team_place']
                cond_1 = '{{done}}' if data_1 <= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_25
        if self.__cache['currentID'] == 26:

            def quest_26(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 1000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_26
        if self.__cache['currentID'] == 27:

            def quest_27(quest):
                main_list, adv_list = ([], [])
                data_1 = str(int(self.__cache['player']['armorResist']['resistedDamage'])) + '/' + str(self.__cache['player']['tankMaxHealth'])
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if self.__cache['player']['armorResist']['resistedDamage'] >= self.__cache['player']['tankMaxHealth'] else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1000 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_27
        if self.__cache['currentID'] == 28:

            def quest_28(quest):
                main_list, adv_list = ([], [])
                summ = self.__cache['player']['kill']['counter_in_3_min'] + self.__cache['squad']['kill_in_3_min']
                cond_1 = '{{done}}' if summ >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_28
        if self.__cache['currentID'] == 29:

            def quest_29(quest):
                main_list, adv_list = ([], [])
                types = 0
                if self.__cache['player']['kill']['counter_lt'] > 0 or self.__cache['squad']['kill_lt'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_mt'] > 0 or self.__cache['squad']['kill_mt'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_ht'] > 0 or self.__cache['squad']['kill_ht'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_spg'] > 0 or self.__cache['squad']['kill_spg'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_atspg'] > 0 or self.__cache['squad']['kill_atspg'] > 0:
                    types += 1
                kills = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                cond_1 = '{{done}}' if types >= 2 and kills >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(kills)).replace('{counter_2}', str(types)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_29
        if self.__cache['currentID'] == 30:

            def quest_30(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['armorResist']['resistedDamage'] + self.__cache['player']['damage']['any'] + (self.__cache['player']['tankMaxHealth'] - self.__cache['player']['tankCurrentHealth'])
                cond_1 = '{{done}}' if data_1 >= 6000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_30
        ' T28 Concept '
        if self.__cache['currentID'] == 91:

            def quest_91(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_91
        if self.__cache['currentID'] == 92:

            def quest_92(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_less_100m']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_92
        if self.__cache['currentID'] == 93:

            def quest_93(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any']
                data_2 = 0
                if self.__cache['player']['kill']['counter_lt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_mt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_ht'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_spg'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_atspg'] > 0:
                    data_2 += 1
                data_3 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 3 and data_2 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_3 >= 2000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_93
        if self.__cache['currentID'] == 94:

            def quest_94(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_devices']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_94
        if self.__cache['currentID'] == 95:

            def quest_95(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['in_circularVisionRadius']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_95
        if self.__cache['currentID'] == 96:

            def quest_96(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_ht']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_96
        if self.__cache['currentID'] == 97:

            def quest_97(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['capture_points']
                data_2 = self.__cache['player']['dropped_capture']
                data_3 = self.__cache['player']['damage']['any']
                data_4 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_2 > 0 or data_1 > 0 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{done}}' if data_3 >= 2000 else '{{notDone}}'
                cond_4 = '{{done}}' if data_4 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                main_list.append(quest['main'][2].replace('{state}', str(cond_3)).replace('{counter}', str(data_3)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)).replace('{counter}', str(data_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_97
        if self.__cache['currentID'] == 98:

            def quest_98(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_98
        if self.__cache['currentID'] == 99:

            def quest_99(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_ramming'] >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['ramming_live'] == 2 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_99
        if self.__cache['currentID'] == 100:

            def quest_100(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['all_place']
                cond_1 = '{{unknown}}' if data_1 <= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_100
        if self.__cache['currentID'] == 101:

            def quest_101(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{unknown}}' if data_1 >= 2000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{done}}' if data_2 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_101
        if self.__cache['currentID'] == 102:

            def quest_102(quest):
                main_list, adv_list = ([], [])
                data_1 = str(int(self.__cache['player']['armorResist']['resistedDamage'])) + '/' + str(self.__cache['player']['tankMaxHealth'] * 2)
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if self.__cache['player']['armorResist']['resistedDamage'] >= self.__cache['player']['tankMaxHealth'] * 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1500 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_102
        if self.__cache['currentID'] == 103:

            def quest_103(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_in_3_min'] + self.__cache['squad']['kill_in_3_min']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_103
        if self.__cache['currentID'] == 104:

            def quest_104(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                data_2 = 0
                if self.__cache['player']['kill']['counter_lt'] > 0 or self.__cache['squad']['kill_lt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_mt'] > 0 or self.__cache['squad']['kill_mt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_ht'] > 0 or self.__cache['squad']['kill_ht'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_spg'] > 0 or self.__cache['squad']['kill_spg'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_atspg'] > 0 or self.__cache['squad']['kill_atspg'] > 0:
                    data_2 += 1
                cond_1 = '{{done}}' if data_1 >= 4 and data_2 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_104
        if self.__cache['currentID'] == 105:

            def quest_105(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['armorResist']['resistedDamage'] + self.__cache['player']['damage']['any'] + (self.__cache['player']['tankMaxHealth'] - self.__cache['player']['tankCurrentHealth'])
                cond_1 = '{{done}}' if data_1 >= 8000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_105
        ' T 55A '
        if self.__cache['currentID'] == 166:

            def quest_166(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_166
        if self.__cache['currentID'] == 167:

            def quest_167(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_less_100m']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_167
        if self.__cache['currentID'] == 168:

            def quest_168(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any']
                data_2 = 0
                if self.__cache['player']['kill']['counter_lt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_mt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_ht'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_spg'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_atspg'] > 0:
                    data_2 += 1
                data_3 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 4 and data_2 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_3 >= 3000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_168
        if self.__cache['currentID'] == 169:

            def quest_169(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_devices']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 5 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_169
        if self.__cache['currentID'] == 170:

            def quest_170(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['in_circularVisionRadius']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 3000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_170
        if self.__cache['currentID'] == 171:

            def quest_171(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_ht_lvlup'] + self.__cache['player']['kill']['counter_ht_lvlupup']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_171
        if self.__cache['currentID'] == 172:

            def quest_172(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['capture_points']
                data_2 = self.__cache['player']['dropped_capture']
                data_3 = self.__cache['player']['damage']['any']
                data_4 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_2 > 0 or data_1 > 0 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{done}}' if data_3 >= 3000 else '{{notDone}}'
                cond_4 = '{{done}}' if data_4 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                main_list.append(quest['main'][2].replace('{state}', str(cond_3)).replace('{counter}', str(data_3)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)).replace('{counter}', str(data_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_172
        if self.__cache['currentID'] == 173:

            def quest_173(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 3000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_173
        if self.__cache['currentID'] == 174:

            def quest_174(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_ramming'] >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['ramming_live'] == 2 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}'
                cond_5 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                main_list.append(quest['main'][2].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_5)))
                return (main_list, adv_list)

            self.generateFalshData = quest_174
        if self.__cache['currentID'] == 175:

            def quest_175(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['team_place']
                cond_1 = '{{unknown}}' if data_1 == 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_175
        if self.__cache['currentID'] == 176:

            def quest_176(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{unknown}}' if data_1 >= 3000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{done}}' if data_2 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_176
        if self.__cache['currentID'] == 177:

            def quest_177(quest):
                main_list, adv_list = ([], [])
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if self.__cache['player']['armorResist']['resistedDamage'] >= self.__cache['player']['tankMaxHealth'] * 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2000 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                data_1 = str(int(self.__cache['player']['armorResist']['resistedDamage'])) + '/' + str(self.__cache['player']['tankMaxHealth'] * 3)
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_177
        if self.__cache['currentID'] == 178:

            def quest_178(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_in_3_min'] + self.__cache['squad']['kill_in_3_min']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_178
        if self.__cache['currentID'] == 179:

            def quest_179(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                data_2 = 0
                if self.__cache['player']['kill']['counter_lt'] > 0 or self.__cache['squad']['kill_lt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_mt'] > 0 or self.__cache['squad']['kill_mt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_ht'] > 0 or self.__cache['squad']['kill_ht'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_spg'] > 0 or self.__cache['squad']['kill_spg'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_atspg'] > 0 or self.__cache['squad']['kill_atspg'] > 0:
                    data_2 += 1
                cond_1 = '{{done}}' if data_1 >= 6 and data_2 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_179
        if self.__cache['currentID'] == 180:

            def quest_180(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['armorResist']['resistedDamage'] + self.__cache['player']['damage']['any'] + (self.__cache['player']['tankMaxHealth'] - self.__cache['player']['tankCurrentHealth'])
                cond_1 = '{{done}}' if data_1 >= 12000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_180
        ' Объект 260 '
        if self.__cache['currentID'] == 241:

            def quest_241(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 5 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_241
        if self.__cache['currentID'] == 242:

            def quest_242(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_less_100m']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_242
        if self.__cache['currentID'] == 243:

            def quest_243(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any']
                data_2 = 0
                if self.__cache['player']['kill']['counter_lt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_mt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_ht'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_spg'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_atspg'] > 0:
                    data_2 += 1
                data_3 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 6 and data_2 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_3 >= 4000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_243
        if self.__cache['currentID'] == 244:

            def quest_244(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_devices']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 6 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 5 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_244
        if self.__cache['currentID'] == 245:

            def quest_245(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['in_circularVisionRadius']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 4000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 5 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_245
        if self.__cache['currentID'] == 246:

            def quest_246(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_ht_lvlupup']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_246
        if self.__cache['currentID'] == 247:

            def quest_247(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['capture_points']
                data_2 = self.__cache['player']['dropped_capture']
                data_3 = self.__cache['player']['damage']['any']
                data_4 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_2 > 0 or data_1 > 0 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{done}}' if data_3 >= 4000 else '{{notDone}}'
                cond_4 = '{{done}}' if data_4 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                main_list.append(quest['main'][2].replace('{state}', str(cond_3)).replace('{counter}', str(data_3)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)).replace('{counter}', str(data_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_247
        if self.__cache['currentID'] == 248:

            def quest_248(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 4000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 5 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_248
        if self.__cache['currentID'] == 249:

            def quest_249(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_ramming_lvlup'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_249
        if self.__cache['currentID'] == 250:

            def quest_250(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['all_place']
                cond_1 = '{{unknown}}' if data_1 == 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_250
        if self.__cache['currentID'] == 251:

            def quest_251(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{unknown}}' if data_1 >= 5000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{done}}' if data_2 >= 5 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_251
        if self.__cache['currentID'] == 252:

            def quest_252(quest):
                main_list, adv_list = ([], [])
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if self.__cache['player']['armorResist']['resistedDamage'] >= self.__cache['player']['tankMaxHealth'] * 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3000 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                data_1 = str(int(self.__cache['player']['armorResist']['resistedDamage'])) + '/' + str(self.__cache['player']['tankMaxHealth'] * 3)
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_252
        if self.__cache['currentID'] == 253:

            def quest_253(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_in_3_min'] + self.__cache['squad']['kill_in_3_min']
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_253
        if self.__cache['currentID'] == 254:

            def quest_254(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                data_2 = 0
                if self.__cache['player']['kill']['counter_lt'] > 0 or self.__cache['squad']['kill_lt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_mt'] > 0 or self.__cache['squad']['kill_mt'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_ht'] > 0 or self.__cache['squad']['kill_ht'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_spg'] > 0 or self.__cache['squad']['kill_spg'] > 0:
                    data_2 += 1
                if self.__cache['player']['kill']['counter_atspg'] > 0 or self.__cache['squad']['kill_atspg'] > 0:
                    data_2 += 1
                cond_1 = '{{done}}' if data_1 >= 8 and data_2 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_254
        if self.__cache['currentID'] == 255:

            def quest_255(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['armorResist']['resistedDamage'] + self.__cache['player']['damage']['any'] + (self.__cache['player']['tankMaxHealth'] - self.__cache['player']['tankCurrentHealth'])
                cond_1 = '{{done}}' if data_1 >= 14000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_255
        ' СТ '
        ' StuG IV '
        if self.__cache['currentID'] == 31:

            def quest_31(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['any'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                main_list.append(quest['main'][2].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_31
        if self.__cache['currentID'] == 32:

            def quest_32(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_any'] >= 6 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_any'] >= 1 else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['counter_any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_32
        if self.__cache['currentID'] == 33:

            def quest_33(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_in_2_min'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_33
        if self.__cache['currentID'] == 34:

            def quest_34(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_track_damage'] >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_track'] >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_34
        if self.__cache['currentID'] == 35:

            def quest_35(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_lt'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_35
        if self.__cache['currentID'] == 36:

            def quest_36(quest):
                main_list, adv_list = ([], [])
                types = 0
                if self.__cache['player']['damage']['lt'] > 0:
                    types += 1
                if self.__cache['player']['damage']['mt'] > 0:
                    types += 1
                if self.__cache['player']['damage']['ht'] > 0:
                    types += 1
                if self.__cache['player']['damage']['spg'] > 0:
                    types += 1
                if self.__cache['player']['damage']['atspg'] > 0:
                    types += 1
                damage = self.__cache['player']['damage']['lt'] + self.__cache['player']['damage']['mt'] + self.__cache['player']['damage']['ht'] + self.__cache['player']['damage']['spg'] + self.__cache['player']['damage']['atspg']
                cond_1 = '{{done}}' if types >= 3 and damage >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(damage)).replace('{counter_2}', str(types)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_36
        if self.__cache['currentID'] == 37:

            def quest_37(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_spg'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                data_1 = self.__cache['player']['kill']['counter_spg']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_37
        if self.__cache['currentID'] == 38:

            def quest_38(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_mt'] >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['damage']['mt'] >= 500 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['counter_mt']
                data_2 = self.__cache['player']['damage']['mt']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_38
        if self.__cache['currentID'] == 39:

            def quest_39(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht_lvl'] + self.__cache['player']['damage']['ht_lvlup']
                cond_1 = '{{done}}' if data_1 >= 500 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_39
        if self.__cache['currentID'] == 40:

            def quest_40(quest):
                main_list, adv_list = ([], [])
                data_2 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_any'] >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['counter_any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_40
        if self.__cache['currentID'] == 41:

            def quest_41(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['any_ramming'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_41
        if self.__cache['currentID'] == 42:

            def quest_42(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_burn'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_42
        if self.__cache['currentID'] == 43:

            def quest_43(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{unknown}}' if data_1 >= 3000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_43
        if self.__cache['currentID'] == 44:

            def quest_44(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                data_2 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if data_2 >= 1500 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_44
        if self.__cache['currentID'] == 45:

            def quest_45(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_atspg'] >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                data_1 = self.__cache['player']['kill']['counter_atspg']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_45
        ' T28 Concept '
        if self.__cache['currentID'] == 106:

            def quest_106(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['any'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                main_list.append(quest['main'][2].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_106
        if self.__cache['currentID'] == 107:

            def quest_107(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_any'] >= 9 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_any'] >= 2 else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['kill']['counter_any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_107
        if self.__cache['currentID'] == 108:

            def quest_108(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['in_2_min'] >= 750 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['in_2_min']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_108
        if self.__cache['currentID'] == 109:

            def quest_109(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_track_damage'] >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_track'] >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_109
        if self.__cache['currentID'] == 110:

            def quest_110(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_lt'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_110
        if self.__cache['currentID'] == 111:

            def quest_111(quest):
                main_list, adv_list = ([], [])
                types = 0
                if self.__cache['player']['damage']['lt'] > 0:
                    types += 1
                if self.__cache['player']['damage']['mt'] > 0:
                    types += 1
                if self.__cache['player']['damage']['ht'] > 0:
                    types += 1
                if self.__cache['player']['damage']['spg'] > 0:
                    types += 1
                if self.__cache['player']['damage']['atspg'] > 0:
                    types += 1
                damage = self.__cache['player']['damage']['lt'] + self.__cache['player']['damage']['mt'] + self.__cache['player']['damage']['ht'] + self.__cache['player']['damage']['spg'] + self.__cache['player']['damage']['atspg']
                cond_1 = '{{done}}' if types >= 3 and damage >= 3000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(damage)).replace('{counter_2}', str(types)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_111
        if self.__cache['currentID'] == 112:

            def quest_112(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_spg'] >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                data_1 = self.__cache['player']['kill']['counter_spg']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_112
        if self.__cache['currentID'] == 113:

            def quest_113(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_mt'] >= 5 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['damage']['mt'] >= 1000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_4 = '{{unknown}}'
                data_1 = self.__cache['player']['damage']['counter_mt']
                data_2 = self.__cache['player']['damage']['mt']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_113
        if self.__cache['currentID'] == 114:

            def quest_114(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht_lvl'] + self.__cache['player']['damage']['ht_lvlup']
                cond_1 = '{{done}}' if data_1 >= 1000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_114
        if self.__cache['currentID'] == 115:

            def quest_115(quest):
                main_list, adv_list = ([], [])
                data_2 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_any'] >= 4 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['counter_any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_115
        if self.__cache['currentID'] == 116:

            def quest_116(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_ramming'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_116
        if self.__cache['currentID'] == 117:

            def quest_117(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_burn']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2000 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_117
        if self.__cache['currentID'] == 118:

            def quest_118(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{unknown}}' if data_1 >= 4000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_118
        if self.__cache['currentID'] == 119:

            def quest_119(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                data_2 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{unknown}}' if data_2 >= 2000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_119
        if self.__cache['currentID'] == 120:

            def quest_120(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['atspg'] >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                data_1 = self.__cache['player']['damage']['atspg']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_120
        ' T 55A '
        if self.__cache['currentID'] == 181:

            def quest_181(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['any'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                main_list.append(quest['main'][2].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_181
        if self.__cache['currentID'] == 182:

            def quest_182(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_any'] >= 12 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_any'] >= 3 else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['kill']['counter_any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_182
        if self.__cache['currentID'] == 183:

            def quest_183(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_in_3_min'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                data_1 = self.__cache['player']['kill']['counter_in_3_min']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_183
        if self.__cache['currentID'] == 184:

            def quest_184(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_track_damage'] >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_track'] >= 2 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                data_1 = self.__cache['player']['kill']['counter_track']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_184
        if self.__cache['currentID'] == 185:

            def quest_185(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_in_2_min_lt'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_185
        if self.__cache['currentID'] == 186:

            def quest_186(quest):
                main_list, adv_list = ([], [])
                types = 0
                if self.__cache['player']['kill']['counter_lt'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_mt'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_ht'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_spg'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_atspg'] > 0:
                    types += 1
                kills = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if types >= 3 and kills >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(kills)).replace('{counter_2}', str(types)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_186
        if self.__cache['currentID'] == 187:

            def quest_187(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_spg']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_187
        if self.__cache['currentID'] == 188:

            def quest_188(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_mt'] >= 6 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_mt'] >= 1 else '{{notDone}}'
                cond_3 = '{{done}}' if self.__cache['player']['damage']['any'] >= 1500 else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['counter_mt']
                data_2 = self.__cache['player']['damage']['any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_188
        if self.__cache['currentID'] == 189:

            def quest_189(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_ht_lvlupup']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1500 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_4 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][2].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_189
        if self.__cache['currentID'] == 190:

            def quest_190(quest):
                main_list, adv_list = ([], [])
                data_2 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_any'] >= 6 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3 else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['counter_any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_190
        if self.__cache['currentID'] == 191:

            def quest_191(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_ramming'] >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['ramming_live'] == 2 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_191
        if self.__cache['currentID'] == 192:

            def quest_192(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_burn_lvlup']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_192
        if self.__cache['currentID'] == 193:

            def quest_193(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{unknown}}' if data_1 >= 6000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_193
        if self.__cache['currentID'] == 194:

            def quest_194(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                data_2 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{done}}' if data_1 >= 6 else '{{notDone}}'
                cond_2 = '{{unknown}}' if data_2 >= 3000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_194
        if self.__cache['currentID'] == 195:

            def quest_195(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_atspg_lvlup'] + self.__cache['player']['kill']['counter_any_lvlupup']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_4 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][2].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_195
        ' Объект 260 '
        if self.__cache['currentID'] == 256:

            def quest_256(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['any'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                main_list.append(quest['main'][2].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_256
        if self.__cache['currentID'] == 257:

            def quest_257(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_any'] >= 15 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_any'] >= 5 else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['kill']['counter_any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_257
        if self.__cache['currentID'] == 258:

            def quest_258(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_in_3_min'] >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                data_1 = self.__cache['player']['kill']['counter_in_3_min']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_258
        if self.__cache['currentID'] == 259:

            def quest_259(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_track_damage'] >= 4 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_track'] >= 3 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                data_1 = self.__cache['player']['kill']['counter_track']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_259
        if self.__cache['currentID'] == 260:

            def quest_260(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_lt']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_260
        if self.__cache['currentID'] == 261:

            def quest_261(quest):
                main_list, adv_list = ([], [])
                types = 0
                if self.__cache['player']['kill']['counter_lt'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_mt'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_ht'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_spg'] > 0:
                    types += 1
                if self.__cache['player']['kill']['counter_atspg'] > 0:
                    types += 1
                kills = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if types >= 3 and kills >= 6 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(kills)).replace('{counter_2}', str(types)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_261
        if self.__cache['currentID'] == 262:

            def quest_262(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_spg']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_262
        if self.__cache['currentID'] == 263:

            def quest_263(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_mt_lvlupup'] >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                return (main_list, adv_list)

            self.generateFalshData = quest_263
        if self.__cache['currentID'] == 264:

            def quest_264(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht_lvlup']
                cond_1 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_264
        if self.__cache['currentID'] == 265:

            def quest_265(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1 >= 8 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_265
        if self.__cache['currentID'] == 266:

            def quest_266(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_ramming_lvlup'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_266
        if self.__cache['currentID'] == 267:

            def quest_267(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_burn_lvlup']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3000 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                data_1 = self.__cache['player']['damage']['counter_burn_lvlup']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_267
        if self.__cache['currentID'] == 268:

            def quest_268(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{unknown}}' if data_1 >= 8000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_268
        if self.__cache['currentID'] == 269:

            def quest_269(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                data_2 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{done}}' if data_1 >= 8 else '{{notDone}}'
                cond_2 = '{{unknown}}' if data_2 >= 4000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_269
        if self.__cache['currentID'] == 270:

            def quest_270(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['atspg']
                cond_1 = '{{done}}' if data_1 >= 4000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_270
        ' ПТ '
        ' StuG IV '
        if self.__cache['currentID'] == 46:

            def quest_46(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_46
        if self.__cache['currentID'] == 47:

            def quest_47(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_devices'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_47
        if self.__cache['currentID'] == 48:

            def quest_48(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_uniq_vehicles']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_48
        if self.__cache['currentID'] == 49:

            def quest_49(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_49
        if self.__cache['currentID'] == 50:

            def quest_50(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_more_300m'] >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_1 >= 1000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                return (main_list, adv_list)

            self.generateFalshData = quest_50
        if self.__cache['currentID'] == 51:

            def quest_51(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['more_250m']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_51
        if self.__cache['currentID'] == 52:

            def quest_52(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_self_full_hp']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_52
        if self.__cache['currentID'] == 53:

            def quest_53(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['tankMaxHealth'] * 2
                cond_1 = '{{done}}' if data_1 > data_2 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_53
        if self.__cache['currentID'] == 54:

            def quest_54(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['piercing_row']
                data_2 = self.__cache['player']['kill']['counter_any']
                if data_1 >= 3:
                    self.__cache['player']['damage']['piercing_row_finished'] = True
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_54
        if self.__cache['currentID'] == 55:

            def quest_55(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_55
        if self.__cache['currentID'] == 56:

            def quest_56(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}' if self.__cache['player']['damage']['team_place'] == 1 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['damage']['any'] >= 1000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['team_place']
                data_2 = self.__cache['player']['damage']['any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_56
        if self.__cache['currentID'] == 57:

            def quest_57(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_ht'] >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['damage']['any'] >= 1000 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                data_1 = self.__cache['player']['damage']['any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_57
        if self.__cache['currentID'] == 58:

            def quest_58(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_58
        if self.__cache['currentID'] == 59:

            def quest_59(quest):
                main_list, adv_list = ([], [])
                data_1 = int(float(self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']) * 100.0 / float(self.__cache['player']['teamdamage']))
                cond_1 = '{{unknown}}' if data_1 >= 20 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_59
        if self.__cache['currentID'] == 60:

            def quest_60(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 3000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_60
        ' T28 Concept '
        if self.__cache['currentID'] == 121:

            def quest_121(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_121
        if self.__cache['currentID'] == 122:

            def quest_122(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_devices']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 1 and data_2 >= 1000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_122
        if self.__cache['currentID'] == 123:

            def quest_123(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_uniq_vehicles']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_123
        if self.__cache['currentID'] == 124:

            def quest_124(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_124
        if self.__cache['currentID'] == 125:

            def quest_125(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_more_300m'] >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                return (main_list, adv_list)

            self.generateFalshData = quest_125
        if self.__cache['currentID'] == 126:

            def quest_126(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['more_250m']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 1000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_126
        if self.__cache['currentID'] == 127:

            def quest_127(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_self_full_hp']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_127
        if self.__cache['currentID'] == 128:

            def quest_128(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['tankMaxHealth'] * 3
                cond_1 = '{{done}}' if data_1 > data_2 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_128
        if self.__cache['currentID'] == 129:

            def quest_129(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['piercing_row']
                data_2 = self.__cache['player']['kill']['counter_any']
                if data_1 >= 4:
                    self.__cache['player']['damage']['piercing_row_finished'] = True
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_129
        if self.__cache['currentID'] == 130:

            def quest_130(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_130
        if self.__cache['currentID'] == 131:

            def quest_131(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}' if self.__cache['player']['damage']['team_place'] == 1 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['damage']['any'] >= 2000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['team_place']
                data_2 = self.__cache['player']['damage']['any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_131
        if self.__cache['currentID'] == 132:

            def quest_132(quest):
                main_list, adv_list = ([], [])
                data_2 = self.__cache['player']['kill']['counter_ht_lvlupup'] + self.__cache['player']['kill']['counter_ht_lvlup']
                cond_1 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['damage']['any'] >= 2000 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                data_1 = self.__cache['player']['damage']['any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_132
        if self.__cache['currentID'] == 133:

            def quest_133(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_133
        if self.__cache['currentID'] == 134:

            def quest_134(quest):
                main_list, adv_list = ([], [])
                data_1 = int(float(self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']) * 100.0 / float(self.__cache['player']['teamdamage']))
                cond_1 = '{{unknown}}' if data_1 >= 25 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_134
        if self.__cache['currentID'] == 135:

            def quest_135(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 4000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_135
        ' T 55A '
        if self.__cache['currentID'] == 196:

            def quest_196(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_196
        if self.__cache['currentID'] == 197:

            def quest_197(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_devices']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 2 and data_2 >= 2000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_197
        if self.__cache['currentID'] == 198:

            def quest_198(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_uniq_vehicles']
                cond_1 = '{{done}}' if data_1 >= 5 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_198
        if self.__cache['currentID'] == 199:

            def quest_199(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_199
        if self.__cache['currentID'] == 200:

            def quest_200(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_more_300m']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_200
        if self.__cache['currentID'] == 201:

            def quest_201(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['more_250m']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_201
        if self.__cache['currentID'] == 202:

            def quest_202(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_self_full_hp']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_202
        if self.__cache['currentID'] == 203:

            def quest_203(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['tankMaxHealth'] * 4
                cond_1 = '{{done}}' if data_1 > data_2 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_203
        if self.__cache['currentID'] == 204:

            def quest_204(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['piercing_row']
                data_2 = self.__cache['player']['kill']['counter_any']
                if data_1 >= 5:
                    self.__cache['player']['damage']['piercing_row_finished'] = True
                cond_1 = '{{done}}' if data_1 >= 5 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_204
        if self.__cache['currentID'] == 205:

            def quest_205(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_205
        if self.__cache['currentID'] == 206:

            def quest_206(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}' if self.__cache['player']['damage']['all_place'] == 1 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['damage']['any'] >= 3000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                data_1 = self.__cache['player']['damage']['all_place']
                data_2 = self.__cache['player']['damage']['any']
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_206
        if self.__cache['currentID'] == 207:

            def quest_207(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_ht']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3000 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_207
        if self.__cache['currentID'] == 208:

            def quest_208(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                cond_1 = '{{done}}' if data_1 >= 5 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_208
        if self.__cache['currentID'] == 209:

            def quest_134(quest):
                main_list, adv_list = ([], [])
                data_1 = int(float(self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']) * 100.0 / float(self.__cache['player']['teamdamage']))
                cond_1 = '{{unknown}}' if data_1 >= 30 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_134
        if self.__cache['currentID'] == 210:

            def quest_135(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 6000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_135
        ' Объект 260 '
        if self.__cache['currentID'] == 271:

            def quest_271(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_271
        if self.__cache['currentID'] == 272:

            def quest_272(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_devices']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 3 and data_2 >= 5000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_272
        if self.__cache['currentID'] == 273:

            def quest_273(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_uniq_vehicles']
                cond_1 = '{{done}}' if data_1 >= 6 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_273
        if self.__cache['currentID'] == 274:

            def quest_274(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_274
        if self.__cache['currentID'] == 275:

            def quest_275(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_more_300m']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_275
        if self.__cache['currentID'] == 276:

            def quest_276(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['more_250m']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 3000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_276
        if self.__cache['currentID'] == 277:

            def quest_277(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_self_full_hp']
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_277
        if self.__cache['currentID'] == 278:

            def quest_278(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['tankMaxHealth'] * 5
                cond_1 = '{{done}}' if data_1 > data_2 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_278
        if self.__cache['currentID'] == 279:

            def quest_279(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['piercing_row']
                data_2 = self.__cache['player']['kill']['counter_any']
                if data_1 >= 7:
                    self.__cache['player']['damage']['piercing_row_finished'] = True
                cond_1 = '{{done}}' if data_1 >= 7 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 5 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_279
        if self.__cache['currentID'] == 280:

            def quest_280(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_280
        if self.__cache['currentID'] == 281:

            def quest_281(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['all_place']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{unknown}}' if data_1 == 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_281
        if self.__cache['currentID'] == 282:

            def quest_282(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_ht']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4000 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_282
        if self.__cache['currentID'] == 283:

            def quest_283(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['squad']['kill_any']
                cond_1 = '{{done}}' if data_1 >= 6 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_283
        if self.__cache['currentID'] == 284:

            def quest_284(quest):
                main_list, adv_list = ([], [])
                data_1 = int(float(self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']) * 100.0 / float(self.__cache['player']['teamdamage']))
                cond_1 = '{{unknown}}' if data_1 >= 35 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_284
        if self.__cache['currentID'] == 285:

            def quest_285(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 8000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 5 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_285
        ' САУ '
        ' StuG IV '
        if self.__cache['currentID'] == 61:

            def quest_61(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_61
        if self.__cache['currentID'] == 62:

            def quest_62(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{notDone}}' if self.__cache['player']['observed'] else '{{unknown}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{done}}' if self.__cache['player']['kill']['counter_any'] >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_62
        if self.__cache['currentID'] == 63:

            def quest_63(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 1000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_63
        if self.__cache['currentID'] == 64:

            def quest_64(quest):
                main_list, adv_list = ([], [])
                data_1 = data_1 = self.__cache['player']['damage']['counter_devices']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_64
        if self.__cache['currentID'] == 65:

            def quest_65(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['tankMaxHealth'] * 4
                cond_1 = '{{done}}' if data_1 > data_2 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_any'] >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_65
        if self.__cache['currentID'] == 66:

            def quest_66(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any_lvl'] + self.__cache['player']['kill']['counter_any_lvlupup']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_66
        if self.__cache['currentID'] == 67:

            def quest_67(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_spg'] >= 1 or self.__cache['player']['kill']['counter_atspg'] >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_1 >= 1000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                return (main_list, adv_list)

            self.generateFalshData = quest_67
        if self.__cache['currentID'] == 68:

            def quest_68(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht']
                cond_1 = '{{done}}' if data_1 >= 1000 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_ht'] >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_68
        if self.__cache['currentID'] == 69:

            def quest_69(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}' if self.__cache['player']['damage']['counter_speed_20_bad'] >= 1 else '{{notDone}}'
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_speed_20'] >= 1 else cond_1
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_69
        if self.__cache['currentID'] == 70:

            def quest_70(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_spg']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_70
        if self.__cache['currentID'] == 71:

            def quest_71(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_oneshotes'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_71
        if self.__cache['currentID'] == 72:

            def quest_72(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['team_place']
                cond_1 = '{{unknown}}' if data_1 <= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if self.__cache['player']['kill']['counter_any'] >= 1 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_72
        if self.__cache['currentID'] == 73:

            def quest_73(quest):
                main_list, adv_list = ([], [])
                data_1 = int(float(self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']) * 100.0 / float(self.__cache['player']['teamdamage']))
                cond_1 = '{{unknown}}' if data_1 >= 15 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_73
        if self.__cache['currentID'] == 74:

            def quest_74(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht'] + self.__cache['player']['damage']['atspg'] + self.__cache['squad']['damage_atspg'] + self.__cache['squad']['damage_ht']
                cond_1 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_74
        if self.__cache['currentID'] == 75:

            def quest_75(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{unknown}}'
                cond_2 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_75
        ' T28 Concept '
        if self.__cache['currentID'] == 136:

            def quest_136(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_136
        if self.__cache['currentID'] == 137:

            def quest_137(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{notDone}}' if self.__cache['player']['observed'] else '{{unknown}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_1)))
                return (main_list, adv_list)

            self.generateFalshData = quest_137
        if self.__cache['currentID'] == 138:

            def quest_138(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_138
        if self.__cache['currentID'] == 139:

            def quest_139(quest):
                main_list, adv_list = ([], [])
                data_1 = data_1 = self.__cache['player']['damage']['counter_devices']
                cond_1 = '{{done}}' if data_1 >= 5 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_139
        if self.__cache['currentID'] == 140:

            def quest_140(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['tankMaxHealth'] * 6
                data_3 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 > data_2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_3 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_140
        if self.__cache['currentID'] == 141:

            def quest_141(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any_lvl'] + self.__cache['player']['kill']['counter_any_lvlupup']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_141
        if self.__cache['currentID'] == 142:

            def quest_142(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_spg_lvlup'] >= 1 or self.__cache['player']['kill']['counter_atspg_lvlup'] >= 1 or self.__cache['player']['kill']['counter_spg_lvlupup'] >= 1 or self.__cache['player']['kill']['counter_atspg_lvlupup'] >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                return (main_list, adv_list)

            self.generateFalshData = quest_142
        if self.__cache['currentID'] == 143:

            def quest_143(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht']
                data_2 = self.__cache['player']['kill']['counter_ht']
                cond_1 = '{{done}}' if data_1 >= 1500 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_143
        if self.__cache['currentID'] == 144:

            def quest_144(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['direct_shots']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_144
        if self.__cache['currentID'] == 145:

            def quest_145(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_spg']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_145
        if self.__cache['currentID'] == 146:

            def quest_146(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_double'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_146
        if self.__cache['currentID'] == 147:

            def quest_147(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['all_place']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{unknown}}' if data_1 <= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_4 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                main_list.append(quest['main'][2].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_147
        if self.__cache['currentID'] == 148:

            def quest_148(quest):
                main_list, adv_list = ([], [])
                data_1 = int(float(self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']) * 100.0 / float(self.__cache['player']['teamdamage']))
                cond_1 = '{{unknown}}' if data_1 >= 20 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_148
        if self.__cache['currentID'] == 149:

            def quest_149(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht'] + self.__cache['player']['damage']['atspg'] + self.__cache['squad']['damage_atspg'] + self.__cache['squad']['damage_ht']
                cond_1 = '{{done}}' if data_1 >= 3000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_149
        if self.__cache['currentID'] == 150:

            def quest_150(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{unknown}}'
                cond_2 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_150
        ' T 55A '
        if self.__cache['currentID'] == 211:

            def quest_211(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 5 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_211
        if self.__cache['currentID'] == 212:

            def quest_212(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{notDone}}' if self.__cache['player']['observed'] else '{{unknown}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_1)))
                return (main_list, adv_list)

            self.generateFalshData = quest_212
        if self.__cache['currentID'] == 213:

            def quest_213(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 3000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_213
        if self.__cache['currentID'] == 214:

            def quest_214(quest):
                main_list, adv_list = ([], [])
                data_1 = data_1 = self.__cache['player']['damage']['counter_devices']
                cond_1 = '{{done}}' if data_1 >= 8 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_214
        if self.__cache['currentID'] == 215:

            def quest_215(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['tankMaxHealth'] * 8
                data_3 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 > data_2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_3 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_215
        if self.__cache['currentID'] == 216:

            def quest_216(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any_lvl'] + self.__cache['player']['kill']['counter_any_lvlupup']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_216
        if self.__cache['currentID'] == 217:

            def quest_217(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_spg_lvlup'] + self.__cache['player']['kill']['counter_atspg_lvlup'] + self.__cache['player']['kill']['counter_spg_lvlupup'] + self.__cache['player']['kill']['counter_atspg_lvlupup']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{done}}' if data_2 >= 3000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_217
        if self.__cache['currentID'] == 218:

            def quest_218(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht']
                data_2 = self.__cache['player']['kill']['counter_ht']
                cond_1 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_218
        if self.__cache['currentID'] == 219:

            def quest_219(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}' if self.__cache['player']['damage']['counter_speed_30_bad'] >= 1 else '{{notDone}}'
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_speed_30'] >= 1 else cond_1
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{notDone}}' if self.__cache['player']['observed'] else '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][2].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_219
        if self.__cache['currentID'] == 220:

            def quest_220(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_spg']
                data_2 = self.__cache['player']['damage']['any']
                data_3 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2000 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_220
        if self.__cache['currentID'] == 221:

            def quest_221(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['damage']['counter_double_with_kill'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_221
        if self.__cache['currentID'] == 222:

            def quest_222(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['team_place']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{unknown}}' if data_1 == 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3 else '{{notDone}}'
                cond_4 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_222
        if self.__cache['currentID'] == 223:

            def quest_223(quest):
                main_list, adv_list = ([], [])
                data_1 = int(float(self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']) * 100.0 / float(self.__cache['player']['teamdamage']))
                cond_1 = '{{unknown}}' if data_1 >= 25 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_223
        if self.__cache['currentID'] == 224:

            def quest_224(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht'] + self.__cache['player']['damage']['atspg'] + self.__cache['squad']['damage_atspg'] + self.__cache['squad']['damage_ht']
                cond_1 = '{{done}}' if data_1 >= 4000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_224
        if self.__cache['currentID'] == 225:

            def quest_225(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{unknown}}'
                cond_2 = '{{done}}' if data_1 >= 3000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_225
        ' Объект 260 '
        if self.__cache['currentID'] == 286:

            def quest_286(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 6 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_286
        if self.__cache['currentID'] == 287:

            def quest_287(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{notDone}}' if self.__cache['player']['observed'] else '{{unknown}}'
                cond_2 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                return (main_list, adv_list)

            self.generateFalshData = quest_287
        if self.__cache['currentID'] == 288:

            def quest_288(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 4000 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_288
        if self.__cache['currentID'] == 289:

            def quest_289(quest):
                main_list, adv_list = ([], [])
                data_1 = data_1 = self.__cache['player']['damage']['counter_devices']
                cond_1 = '{{done}}' if data_1 >= 10 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_289
        if self.__cache['currentID'] == 290:

            def quest_290(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['tankMaxHealth'] * 10
                data_3 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 > data_2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_3 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_290
        if self.__cache['currentID'] == 291:

            def quest_291(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any_lvlupup']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_291
        if self.__cache['currentID'] == 292:

            def quest_292(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_spg_lvlup'] + self.__cache['player']['kill']['counter_atspg_lvlup'] + self.__cache['player']['kill']['counter_spg_lvlupup'] + self.__cache['player']['kill']['counter_atspg_lvlupup']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{done}}' if data_2 >= 4000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_292
        if self.__cache['currentID'] == 293:

            def quest_293(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht']
                data_2 = self.__cache['player']['kill']['counter_ht']
                cond_1 = '{{done}}' if data_1 >= 3000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_293
        if self.__cache['currentID'] == 294:

            def quest_294(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['direct_shots']
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                cond_4 = '{{notDone}}' if self.__cache['player']['observed'] else '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][2].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_294
        if self.__cache['currentID'] == 295:

            def quest_295(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_spg']
                data_2 = self.__cache['player']['damage']['any']
                data_3 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4000 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 5 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_295
        if self.__cache['currentID'] == 296:

            def quest_296(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{done}}' if self.__cache['player']['kill']['counter_double'] >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_296
        if self.__cache['currentID'] == 297:

            def quest_297(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['all_place']
                data_2 = self.__cache['player']['kill']['counter_any']
                cond_1 = '{{unknown}}' if data_1 == 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_4 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                main_list.append(quest['main'][2].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_297
        if self.__cache['currentID'] == 298:

            def quest_298(quest):
                main_list, adv_list = ([], [])
                data_1 = int(float(self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']) * 100.0 / float(self.__cache['player']['teamdamage']))
                cond_1 = '{{unknown}}' if data_1 >= 30 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_298
        if self.__cache['currentID'] == 299:

            def quest_299(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht'] + self.__cache['player']['damage']['atspg'] + self.__cache['squad']['damage_atspg'] + self.__cache['squad']['damage_ht']
                cond_1 = '{{done}}' if data_1 >= 5000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_299
        if self.__cache['currentID'] == 300:

            def quest_300(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                cond_1 = '{{unknown}}'
                cond_2 = '{{done}}' if data_1 >= 3000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_300
        ' ЛТ '
        ' StuG IV '
        if self.__cache['currentID'] == 1:

            def quest_1(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_1
        if self.__cache['currentID'] == 2:

            def quest_2(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['spotted_enemys']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_2
        if self.__cache['currentID'] == 3:

            def quest_3(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_3
        if self.__cache['currentID'] == 4:

            def quest_4(quest):
                main_list, adv_list = ([], [])
                data_1 = len(self.__cache['player']['damage']['counter_track_ids_uniq'])
                data_2 = self.__cache['player']['damage']['track_by_alies']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_4
        if self.__cache['currentID'] == 5:

            def quest_5(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['radio_kill_counter']
                data_2 = len(self.__cache['player']['radio_damage_counter_ids_uniq'])
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_5
        if self.__cache['currentID'] == 6:

            def quest_6(quest):
                main_list, adv_list = ([], [])
                data_1 = len(self.__cache['player']['radio_track_damage_counter_ids_uniq'])
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_6
        if self.__cache['currentID'] == 7:

            def quest_7(quest):
                main_list, adv_list = ([], [])
                data_1 = 0
                for vehID in self.__cache['player']['spg_damages_id']:
                    if vehID in self.__cache['player']['spotted_enemys_ids']:
                        data_1 += 1

                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_7
        if self.__cache['currentID'] == 8:

            def quest_8(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['capture_points']
                data_2 = self.__cache['player']['dropped_capture']
                data_3 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{notDone}}' if data_1 == 0 else '{{unknown}}'
                cond_1 = '{{done}}' if data_2 > 0 else cond_1
                cond_2 = '{{unknown}}'
                cond_3 = '{{done}}' if data_3 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_8
        if self.__cache['currentID'] == 9:

            def quest_9(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['spotted_enemys']
                cond_1 = '{{unknown}}' if data_1 >= 2 and not self.__cache['player']['observed'] else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_9
        if self.__cache['currentID'] == 10:

            def quest_10(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_10
        if self.__cache['currentID'] == 11:

            def quest_11(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any_lvl']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_11
        if self.__cache['currentID'] == 12:

            def quest_12(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_12
        if self.__cache['currentID'] == 13:

            def quest_13(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{unknown}}'
                cond_2 = '{{done}}' if data_1 >= 1000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_4 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_13
        if self.__cache['currentID'] == 14:

            def quest_14(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_14
        if self.__cache['currentID'] == 15:

            def quest_15(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['track_by_alies'] + self.__cache['player']['damage']['track']
                cond_1 = '{{unknown}}' if data_1 >= 4000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_15
        ' T28 Concept '
        if self.__cache['currentID'] == 76:

            def quest_76(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_76
        if self.__cache['currentID'] == 77:

            def quest_77(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['spotted_enemys']
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_77
        if self.__cache['currentID'] == 78:

            def quest_78(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_78
        if self.__cache['currentID'] == 79:

            def quest_79(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['track_by_alies']
                data_2 = self.__cache['player']['kill']['track_by_alies']
                cond_1 = '{{done}}' if data_1 >= 250 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_79
        if self.__cache['currentID'] == 80:

            def quest_80(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['radio_kill_counter']
                data_2 = len(self.__cache['player']['radio_damage_counter_ids_uniq'])
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_80
        if self.__cache['currentID'] == 81:

            def quest_81(quest):
                main_list, adv_list = ([], [])
                data_1 = len(self.__cache['player']['radio_track_damage_counter_ids_uniq'])
                data_2 = self.__cache['player']['radio_kill_counter'] + self.__cache['player']['kill']['track_by_alies']
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_81
        if self.__cache['currentID'] == 82:

            def quest_82(quest):
                main_list, adv_list = ([], [])
                data_1 = 0
                for vehID in self.__cache['player']['spg_damages_id']:
                    if vehID in self.__cache['player']['spotted_enemys_ids']:
                        data_1 += 1

                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_82
        if self.__cache['currentID'] == 83:

            def quest_83(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['capture_points']
                data_2 = self.__cache['player']['dropped_capture']
                data_3 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{notDone}}' if data_1 < 20 else '{{unknown}}'
                cond_1 = '{{done}}' if data_2 > 19 else cond_1
                cond_2 = '{{unknown}}'
                cond_3 = '{{done}}' if data_3 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_83
        if self.__cache['currentID'] == 84:

            def quest_84(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['spotted_enemys']
                cond_1 = '{{unknown}}' if data_1 >= 4 and not self.__cache['player']['observed'] else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_84
        if self.__cache['currentID'] == 85:

            def quest_85(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_85
        if self.__cache['currentID'] == 86:

            def quest_86(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any_lvl']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 6 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1500 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_86
        if self.__cache['currentID'] == 87:

            def quest_87(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_87
        if self.__cache['currentID'] == 88:

            def quest_88(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{unknown}}'
                cond_2 = '{{done}}' if data_1 >= 1500 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_4 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_88
        if self.__cache['currentID'] == 89:

            def quest_89(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_89
        if self.__cache['currentID'] == 90:

            def quest_90(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['track_by_alies'] + self.__cache['player']['damage']['track']
                cond_1 = '{{unknown}}' if data_1 >= 4000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_90
        ' T 55A '
        if self.__cache['currentID'] == 151:

            def quest_151(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_151
        if self.__cache['currentID'] == 152:

            def quest_152(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['spotted_enemys']
                cond_1 = '{{done}}' if data_1 >= 6 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_152
        if self.__cache['currentID'] == 153:

            def quest_153(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['spotted_enemys']
                data_3 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1 >= 5 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 5 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_153
        if self.__cache['currentID'] == 154:

            def quest_154(quest):
                main_list, adv_list = ([], [])
                data_1 = len(self.__cache['player']['damage']['counter_track_ids_uniq'])
                data_2 = self.__cache['player']['kill']['track_by_alies']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_154
        if self.__cache['currentID'] == 155:

            def quest_155(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['radio_kill_counter']
                data_2 = len(self.__cache['player']['radio_damage_counter_ids_uniq'])
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 6 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_155
        if self.__cache['currentID'] == 156:

            def quest_156(quest):
                main_list, adv_list = ([], [])
                data_1 = len(self.__cache['player']['radio_track_damage_counter_ids_uniq'])
                data_2 = self.__cache['player']['radio_kill_counter'] + self.__cache['player']['kill']['track_by_alies']
                cond_1 = '{{done}}' if data_1 >= 6 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_156
        if self.__cache['currentID'] == 157:

            def quest_157(quest):
                main_list, adv_list = ([], [])
                data_1 = 0
                for vehID in self.__cache['player']['spg_damages_id']:
                    if vehID in self.__cache['player']['spotted_enemys_ids']:
                        data_1 += 1

                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_157
        if self.__cache['currentID'] == 158:

            def quest_158(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['capture_points']
                data_2 = self.__cache['player']['dropped_capture']
                data_3 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{notDone}}' if data_1 < 40 else '{{unknown}}'
                cond_1 = '{{done}}' if data_2 > 39 else cond_1
                cond_2 = '{{unknown}}'
                cond_3 = '{{done}}' if data_3 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_158
        if self.__cache['currentID'] == 159:

            def quest_159(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['spotted_enemys']
                cond_1 = '{{unknown}}' if data_1 >= 6 and not self.__cache['player']['observed'] else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_159
        if self.__cache['currentID'] == 160:

            def quest_160(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_160
        if self.__cache['currentID'] == 161:

            def quest_161(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any_lvl']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 10 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_161
        if self.__cache['currentID'] == 162:

            def quest_162(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_162
        if self.__cache['currentID'] == 163:

            def quest_163(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{unknown}}'
                cond_2 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_4 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_163
        if self.__cache['currentID'] == 164:

            def quest_164(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_164
        if self.__cache['currentID'] == 165:

            def quest_165(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['track_by_alies'] + self.__cache['player']['damage']['track']
                cond_1 = '{{unknown}}' if data_1 >= 7000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_165
        ' Объект 260 '
        if self.__cache['currentID'] == 226:

            def quest_226(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_226
        if self.__cache['currentID'] == 227:

            def quest_227(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['spotted_enemys']
                cond_1 = '{{done}}' if data_1 >= 8 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_227
        if self.__cache['currentID'] == 228:

            def quest_228(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any']
                data_2 = self.__cache['player']['spotted_enemys']
                data_3 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1 >= 6 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 7 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_228
        if self.__cache['currentID'] == 229:

            def quest_229(quest):
                main_list, adv_list = ([], [])
                data_1 = len(self.__cache['player']['damage']['counter_track_ids_uniq'])
                data_2 = self.__cache['player']['damage']['track_by_alies']
                data_3 = self.__cache['player']['kill']['track_by_alies']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 500 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_229
        if self.__cache['currentID'] == 230:

            def quest_230(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['radio_kill_counter']
                data_2 = len(self.__cache['player']['radio_damage_counter_ids_uniq'])
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{done}}' if data_2 >= 6 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_230
        if self.__cache['currentID'] == 231:

            def quest_231(quest):
                main_list, adv_list = ([], [])
                data_1 = len(self.__cache['player']['radio_track_damage_counter_ids_uniq'])
                data_2 = self.__cache['player']['radio_kill_counter'] + self.__cache['player']['kill']['track_by_alies']
                cond_1 = '{{done}}' if data_1 >= 8 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_231
        if self.__cache['currentID'] == 232:

            def quest_232(quest):
                main_list, adv_list = ([], [])
                data_1 = 0
                for vehID in self.__cache['player']['spg_damages_id']:
                    if vehID in self.__cache['player']['spotted_enemys_ids']:
                        data_1 += 1

                data_2 = self.__cache['player']['kill']['counter_spg_lvlup'] + self.__cache['player']['kill']['counter_spg_lvlupup']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_4 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_232
        if self.__cache['currentID'] == 233:

            def quest_233(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['capture_points']
                data_2 = self.__cache['player']['dropped_capture']
                data_3 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{notDone}}' if data_1 < 60 else '{{unknown}}'
                cond_1 = '{{done}}' if data_2 > 59 else cond_1
                cond_2 = '{{unknown}}'
                cond_3 = '{{done}}' if data_3 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter_1}', str(data_1)).replace('{counter_2}', str(data_2)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)).replace('{counter}', str(data_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_233
        if self.__cache['currentID'] == 234:

            def quest_234(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['spotted_enemys']
                cond_1 = '{{unknown}}' if data_1 >= 7 and not self.__cache['player']['observed'] else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_234
        if self.__cache['currentID'] == 235:

            def quest_235(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_235
        if self.__cache['currentID'] == 236:

            def quest_236(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_any_lvl']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 12 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2500 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)).replace('{counter}', str(data_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_236
        if self.__cache['currentID'] == 237:

            def quest_237(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_3)))
                return (main_list, adv_list)

            self.generateFalshData = quest_237
        if self.__cache['currentID'] == 238:

            def quest_238(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any'] + self.__cache['squad']['damage_any']
                cond_1 = '{{unknown}}'
                cond_2 = '{{done}}' if data_1 >= 2500 else '{{notDone}}'
                cond_3 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                cond_4 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                main_list.append(quest['main'][1].replace('{state}', str(cond_2)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_3)))
                adv_list.append(quest['adv'][1].replace('{state}', str(cond_4)))
                return (main_list, adv_list)

            self.generateFalshData = quest_238
        if self.__cache['currentID'] == 239:

            def quest_239(quest):
                main_list, adv_list = ([], [])
                cond_1 = '{{unknown}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_239
        if self.__cache['currentID'] == 240:

            def quest_240(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['track_by_alies'] + self.__cache['player']['damage']['track']
                cond_1 = '{{unknown}}' if data_1 >= 8000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if self.__cache['player']['alive'] else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', str(cond_1)).replace('{counter}', str(data_1)))
                adv_list.append(quest['adv'][0].replace('{state}', str(cond_2)))
                return (main_list, adv_list)

            self.generateFalshData = quest_240
        ' Т-22 ср.'
        ' Стальная Охота '
        if self.__cache['currentID'] == 301:

            def quest_301(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['fallout']['flagDroppedToGround']
                data_3 = self.__cache['fallout']['flagDelivered']
                cond_1 = '{{done}}' if data_2 > 1 or data_3 > 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_1 >= 7500 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter_1}', str(int(data_3))).replace('{counter_2}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(data_1)))
                return (main_list, adv_list)

            self.generateFalshData = quest_301
        if self.__cache['currentID'] == 302:

            def quest_302(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['stat_winPoints']
                data_2 = self.__cache['fallout']['stat_equipmentDamage']
                cond_1 = '{{done}}' if data_1 >= 100 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_302
        if self.__cache['currentID'] == 303:

            def quest_303(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['flagDroppedToGround']
                data_2 = self.__cache['fallout']['stat_xp']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1500 else '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_303
        if self.__cache['currentID'] == 304:

            def quest_304(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['killedIn2Min']
                data_2 = self.__cache['fallout']['stat_deathCount']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_2 = '{{unknown}}' if data_2 <= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2))
                return (main_list, adv_list)

            self.generateFalshData = quest_304
        if self.__cache['currentID'] == 305:

            def quest_305(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1 >= 6000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_305
        if self.__cache['currentID'] == 306:

            def quest_306(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['stat_equipmentDamage']
                data_2 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1 >= 2000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 4 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_306
        if self.__cache['currentID'] == 307:

            def quest_307(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2_1 = self.__cache['fallout']['flagDroppedToGround']
                data_2_2 = self.__cache['fallout']['flagDelivered']
                data_3 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1 >= 8000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2_1 >= 2 or data_2_2 >= 2 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 5 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter_1}', str(int(data_2_2))).replace('{counter_2}', str(int(data_2_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_3))))
                return (main_list, adv_list)

            self.generateFalshData = quest_307
        if self.__cache['currentID'] == 308:

            def quest_308(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['stat_equipmentKills']
                cond_1 = '{{done}}' if data_1 >= 3 else '{{notDone}}'
                cond_2 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2))
                return (main_list, adv_list)

            self.generateFalshData = quest_308
        if self.__cache['currentID'] == 309:

            def quest_309(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_devices']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 12 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 8000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_309
        if self.__cache['currentID'] == 310:

            def quest_310(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                data_2 = self.__cache['fallout']['stat_equipmentDamage']
                cond_1 = '{{done}}' if data_1 >= 10 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1500 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter_1}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_310
        if self.__cache['currentID'] == 311:

            def quest_311(quest):
                main_list, adv_list = ([], [])
                data_1_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                data_1_2 = self.__cache['fallout']['stat_deathCount']
                data_2 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1_1 - data_1_2 * 3 > 0 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 7 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter_1}', str(int(data_1_1))).replace('{counter_2}', str(int(data_1_2))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3))
                return (main_list, adv_list)

            self.generateFalshData = quest_311
        if self.__cache['currentID'] == 312:

            def quest_312(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                data_2 = self.__cache['player']['damage']['any']
                data_3 = self.__cache['fallout']['stat_deathCount']
                cond_1 = '{{done}}' if data_1 >= 8 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 6000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if data_3 <= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3))
                return (main_list, adv_list)

            self.generateFalshData = quest_312
        if self.__cache['currentID'] == 313:

            def quest_313(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1 >= 12000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 5 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_313
        if self.__cache['currentID'] == 314:

            def quest_314(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['fallout']['stat_equipmentDamage']
                cond_1 = '{{done}}' if data_1 >= 10000 and self.__cache['fallout']['stat_deathCount'] <= 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1500 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_314
        if self.__cache['currentID'] == 315:

            def quest_315(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                data_3 = self.__cache['fallout']['place_winPoints']
                cond_1 = '{{unknown}}' if data_3 == 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_1 >= 12000 else '{{notDone}}'
                cond_3 = '{{done}}' if data_2 >= 7 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_315
        ' Т-22 ср.'
        ' Превосходство '
        if self.__cache['currentID'] == 401:

            def quest_401(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['stat_winPoints']
                data_2 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 50 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2000 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3))
                return (main_list, adv_list)

            self.generateFalshData = quest_401
        if self.__cache['currentID'] == 402:

            def quest_402(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['killedIn2Min']
                data_2 = self.__cache['fallout']['stat_winPoints']
                cond_1 = '{{done}}' if data_1 >= 1 else '{{notDone}}'
                cond_3 = '{{done}}' if data_2 >= 200 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_2))))
                return (main_list, adv_list)

            self.generateFalshData = quest_402
        if self.__cache['currentID'] == 403:

            def quest_403(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['stat_equipmentDamage']
                data_3 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1 >= 1000 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_3))))
                return (main_list, adv_list)

            self.generateFalshData = quest_403
        if self.__cache['currentID'] == 404:

            def quest_404(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['ht']
                data_2 = self.__cache['player']['damage']['mt']
                data_3 = self.__cache['fallout']['flagDelivered']
                cond_1 = '{{done}}' if data_1 >= 2500 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 2500 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_3))))
                return (main_list, adv_list)

            self.generateFalshData = quest_404
        if self.__cache['currentID'] == 405:

            def quest_405(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_track']
                data_2 = self.__cache['player']['kill']['counter_self_full_hp']
                cond_1 = '{{done}}' if data_1 >= 4 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 1 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3))
                return (main_list, adv_list)

            self.generateFalshData = quest_405
        if self.__cache['currentID'] == 406:

            def quest_406(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['any']
                data_2 = self.__cache['fallout']['stat_deathCount']
                data_3 = self.__cache['fallout']['flagDelivered']
                cond_1 = '{{done}}' if data_1 >= 6000 else '{{notDone}}'
                cond_2 = '{{unknown}}' if data_2 <= 1 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_3))))
                return (main_list, adv_list)

            self.generateFalshData = quest_406
        if self.__cache['currentID'] == 407:

            def quest_407(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['armorResist']['resistedDamage'] + self.__cache['fallout']['takenDamage']
                data_2 = self.__cache['player']['damage']['counter_any']
                data_3 = self.__cache['player']['damage']['any']
                cond_1 = '{{done}}' if data_1 >= 8000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 5 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 3000 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_3))))
                return (main_list, adv_list)

            self.generateFalshData = quest_407
        if self.__cache['currentID'] == 408:

            def quest_408(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['stat_equipmentKills']
                data_2 = self.__cache['fallout']['stat_winPoints']
                data_3 = self.__cache['fallout']['flagDelivered']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 150 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_3))))
                return (main_list, adv_list)

            self.generateFalshData = quest_408
        if self.__cache['currentID'] == 409:

            def quest_409(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['armorResist']['resistedDamage'] + self.__cache['player']['damage']['any']
                data_3 = self.__cache['fallout']['stat_deathCount']
                cond_1 = '{{done}}' if data_1 >= 10000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if data_3 <= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_3))))
                return (main_list, adv_list)

            self.generateFalshData = quest_409
        if self.__cache['currentID'] == 410:

            def quest_410(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['more_200m']
                data_2 = self.__cache['fallout']['damageLess150m']
                data_3 = self.__cache['fallout']['stat_equipmentDamage']
                cond_1 = '{{done}}' if data_1 >= 3000 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 3000 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 500 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_3))))
                return (main_list, adv_list)

            self.generateFalshData = quest_410
        if self.__cache['currentID'] == 411:

            def quest_411(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['stat_equipmentKills']
                data_2_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                cond_1 = '{{done}}' if data_1 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 8 else '{{notDone}}'
                cond_3 = '{{unknown}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3))
                return (main_list, adv_list)

            self.generateFalshData = quest_411
        if self.__cache['currentID'] == 412:

            def quest_412(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['place_winPoints']
                data_2 = self.__cache['fallout']['stat_winPoints']
                data_3 = self.__cache['fallout']['flagDelivered']
                cond_1 = '{{unknown}}' if data_1 == 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 350 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_3))))
                return (main_list, adv_list)

            self.generateFalshData = quest_412
        if self.__cache['currentID'] == 413:

            def quest_413(quest):
                data_1_1 = self.__cache['player']['kill']['counter_any'] + self.__cache['player']['kill']['counter_ramming']
                data_1_2 = 0
                if self.__cache['player']['kill']['counter_lt'] > 0:
                    data_1_2 += 1
                if self.__cache['player']['kill']['counter_mt'] > 0:
                    data_1_2 += 1
                if self.__cache['player']['kill']['counter_ht'] > 0:
                    data_1_2 += 1
                if self.__cache['player']['kill']['counter_spg'] > 0:
                    data_1_2 += 1
                if self.__cache['player']['kill']['counter_atspg'] > 0:
                    data_1_2 += 1
                data_3 = self.__cache['fallout']['stat_deathCount']
                cond_1 = '{{done}}' if data_1_1 >= 10 and data_1_2 >= 2 else '{{notDone}}'
                cond_2 = '{{done}}' if data_3 >= 1 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter_1}', str(int(data_1_1))).replace('{counter_2}', str(int(data_1_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_2).replace('{counter}', str(int(data_3))))
                return (main_list, adv_list)

            self.generateFalshData = quest_413
        if self.__cache['currentID'] == 414:

            def quest_414(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['player']['damage']['counter_devices']
                data_2 = self.__cache['player']['damage']['in_circularVisionRadius']
                data_3 = self.__cache['fallout']['flagDelivered']
                cond_1 = '{{done}}' if data_1 >= 10 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 10000 else '{{notDone}}'
                cond_3 = '{{done}}' if data_3 >= 2 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1).replace('{counter}', str(int(data_1))))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3).replace('{counter}', str(int(data_3))))
                return (main_list, adv_list)

            self.generateFalshData = quest_414
        if self.__cache['currentID'] == 415:

            def quest_415(quest):
                main_list, adv_list = ([], [])
                data_1 = self.__cache['fallout']['place_winPoints']
                data_2 = self.__cache['player']['damage']['any']
                data_3 = self.__cache['fallout']['stat_deathCount']
                cond_1 = '{{unknown}}' if data_1 == 1 else '{{notDone}}'
                cond_2 = '{{done}}' if data_2 >= 15000 else '{{notDone}}'
                cond_3 = '{{unknown}}' if data_3 == 0 else '{{notDone}}'
                main_list.append(quest['main'][0].replace('{state}', cond_1))
                main_list.append(quest['main'][1].replace('{state}', cond_2).replace('{counter}', str(int(data_2))))
                adv_list.append(quest['adv'][0].replace('{state}', cond_3))
                return (main_list, adv_list)

            self.generateFalshData = quest_415

    def initBattleFlash(self):
        import GUI
        from gui import g_guiResetters
        from gui.app_loader.loader import g_appLoader

        class potapovFlash():
            __module__ = __name__

            def __init__(self, parent):
                self.__flashObject = None
                self.config = parent.config
                self.parent = parent
                self.visible = False
                self.canShow = True
                battleWindow = g_appLoader.getDefBattleApp()
                if IS_PROTANKI:
                    battleWindow.getRoot().loadSwf('../../scripts/client/gui/mods/mod_pro_potapov/pro_potapov.swf', battleWindow.getRoot()._global)
                else:
                    battleWindow.getRoot().loadSwf('../../scripts/client/gui/mods/mod_potapov/potapov.swf', battleWindow.getRoot()._global)
                battleWindow.addExternalCallback('ProPotapov.populate', self.populate)
                battleWindow.addExternalCallback('ProPotapov.newPosition', self.onNewPos)
                battleWindow.addExternalCallback('ProPotapov.log', self.log)

            def populate(self, *args):
                battleWindow = g_appLoader.getDefBattleApp()
                self.__flashObject = battleWindow.getRoot()._global.ProPotapov
                g_guiResetters.add(self.onChangeScreenRes)
                self.as_setVisible(False if self.config['displayType'] == 2 else True)
                self.as_setConfig(self.config['displayPattern'], [self.config['displayPosOffsetX'], self.config['displayPosOffsetY']], self.config['displayWidth'], [self.config['pattern']['shadow']['distance'],
                 self.config['pattern']['shadow']['angle'],
                 '0x' + self.config['pattern']['shadow']['color'],
                 float(float(self.config['pattern']['shadow']['alpha']) / 100.0),
                 self.config['pattern']['shadow']['blur'],
                 self.config['pattern']['shadow']['strength']], [self.config['pattern']['background']['enable'], '0x' + self.config['pattern']['background']['color'], float(self.config['pattern']['background']['alpha'])])
                self.onChangeScreenRes()
                self.parent.updateFlashData()

            def destroy(self):
                g_guiResetters.discard(self.onChangeScreenRes)
                self.__flashObject = None

            def onChangeScreenRes(self):
                screen = GUI.screenResolution()
                self.as_setScreenRes(screen[0], screen[1])

            def as_setScreenRes(self, width, height):
                if self.__flashObject:
                    self.__flashObject.setScreenRes(width, height)

            def as_setVisible(self, isVisible):
                self.visible = isVisible
                show = self.visible if self.canShow else False
                if self.__flashObject:
                    self.__flashObject.setVisible(show)

            def as_setConfig(self, pattern, offset, width, shadow, background):
                if self.__flashObject:
                    self.__flashObject.setConfig(pattern, offset, width, shadow, background)

            def as_setOffset(self, offsetX, offsetY):
                if self.__flashObject:
                    self.__flashObject.setOffset(offsetX, offsetY)

            def as_setText(self, text, hint, useHint):
                if self.__flashObject:
                    self.__flashObject.setText(text, hint, useHint)

            def log(self, num, str):
                print '[LOG][potapov]', num, str

            def onNewPos(self, num, x, y):
                self.parent.config['displayPosOffsetX'] = int(x)
                self.parent.config['displayPosOffsetY'] = int(y)

        self.potapovFlash = potapovFlash(self)

    def updateFlashData(self):
        if not self.__config['enable'] or not self.__cache['battle']['inited']:
            return
        quest = self.__config['texts'][str(self.__cache['currentID'])]
        main_list, adv_list = self.generateFalshData(quest)
        main = self.__config['pattern']['mainQuest'].replace('{main}', self.__config['pattern']['seperators']['main'].join(main_list))
        adv = self.__config['pattern']['advQuest'].replace('{adv}', self.__config['pattern']['seperators']['adv'].join(adv_list))
        main = main.replace('{{done}}', self.__config['pattern']['state']['done'])
        main = main.replace('{{notDone}}', self.__config['pattern']['state']['notDone'])
        main = main.replace('{{unknown}}', self.__config['pattern']['state']['unknown'])
        adv = adv.replace('{{done}}', self.__config['pattern']['state']['done'])
        adv = adv.replace('{{notDone}}', self.__config['pattern']['state']['notDone'])
        adv = adv.replace('{{unknown}}', self.__config['pattern']['state']['unknown'])
        result = self.__config['pattern']['nameQuest'].replace('{name}', quest['name']) if self.__config['displayName'] else ''
        if self.guiShomMaximal:
            result += main
            result += adv
        else:
            result += main
        hint = '<font size="13" face="$FieldFont" color="#EEEEEE">Мышью можно двигать панель.</font><br>' if self.__showHint else ''
        message = self.__config['pattern']['global'].replace('{data}', result)
        tempData = hint + message
        if tempData != self.__prevFlashData:
            self.__prevFlashData = tempData
            self.potapovFlash.as_setText(message, hint, self.__showHint)
        if self.__config['debug']:
            with open('POTAPOV.log', 'a') as fh:
                fh.write(str(self.__cache['currentID']) + '\n')
                fh.write(message + '\n\n')


class ModSettingsMod(object):
    __module__ = __name__

    def __init__(self):
        self.linkage = 'Potapov'

        def getDisplayStyle():
            if g_potapov.config['styleFile'] in ['mod_potapov/styles/default_orange.json', 'mod_pro_potapov/styles/default_orange.json']:
                return 0
            if g_potapov.config['styleFile'] in ['mod_potapov/styles/default_green.json', 'mod_pro_potapov/styles/default_green.json']:
                return 1
            if g_potapov.config['styleFile'] in ['mod_potapov/styles/default_blue.json', 'mod_pro_potapov/styles/default_blue.json']:
                return 2
            if g_potapov.config['styleFile'] in ['mod_potapov/styles/minimal.json', 'mod_pro_potapov/styles/minimal.json']:
                return 3
            if g_potapov.config['styleFile'] in ['mod_potapov/styles/color_blind.json', 'mod_pro_potapov/styles/color_blind.json']:
                return 4
            if g_potapov.config['styleFile'] in ['mod_potapov/styles/2rokk.json', 'mod_pro_potapov/styles/2rokk.json']:
                return 5
            return 6

        self.template = {'modDisplayName': 'Мод "Прогресс выполнения ЛБЗ в бою"' if IS_PROTANKI else 'Прогресс выполнения ЛБЗ в бою',
         'settingsVersion': 18,
         'enabled': g_potapov.config['enable'],
         'column1': [{'type': 'Dropdown',
                      'text': 'Оформление мода (стиль отображения)',
                      'tooltip': '{HEADER}Оформление мода (стиль отображения){/HEADER}{BODY}Выберите стиль отображения панели с личными боевыми заданиями. Можно создать собственное оформление и выбрать его в данном меню.{/BODY}',
                      'itemRenderer': 'DropDownListItemRendererSound',
                      'options': [{'label': 'Стандартное "Персик"'},
                                  {'label': 'Стандартное "Лайм"'},
                                  {'label': 'Стандартное "Океан"'},
                                  {'label': 'Минималистичное'},
                                  {'label': 'Цветовая слепота'},
                                  {'label': 'Авторский: 2rokk'},
                                  {'label': 'Собственный стиль'}],
                      'width': 200,
                      'value': getDisplayStyle(),
                      'varName': 'displayStyle'}, {'type': 'Dropdown',
                      'text': 'Положение панели на экране',
                      'tooltip': '{HEADER}Положение панели на экране{/HEADER}{BODY}Выберите предпочитаемое расположение мода. Если хотите изменить положение мода в бою, то, удерживая клавишу [Ctrl], передвигайте панель мода стрелками вверх-вниз, влево-вправо.{/BODY}',
                      'itemRenderer': 'DropDownListItemRendererSound',
                      'options': [{'label': 'Сверху, возле левых ушей'},
                                  {'label': 'Сверху, возле правых ушей'},
                                  {'label': 'Под левыми ушами'},
                                  {'label': 'Под правыми ушами'},
                                  {'label': 'Справа от расходников'},
                                  {'label': 'Слева от расходников'},
                                  {'label': 'По центру'}],
                      'width': 200,
                      'value': g_potapov.config['displayPattern'],
                      'varName': 'displayPattern'}, {'type': 'Slider',
                      'text': 'Ширина панели',
                      'minimum': 200,
                      'maximum': 400,
                      'snapInterval': 25,
                      'width': 150,
                      'value': g_potapov.config['displayWidth'],
                      'format': '{{value}} пикселей',
                      'varName': 'displayWidth'}],
         'column2': [{'type': 'Dropdown',
                      'text': 'Метод отображения панели',
                      'tooltip': '{HEADER}Метод отображения панели{/HEADER}{BODY}Выберите метод отображения панели с личными боевыми задачами.<br><br>* Постоянно - основная и дополнительная задачи отображаются всегда;<br>* Доп. инфо по клавише - основная задача отображается постоянно, а дополнительная - при нажатии на выбранную горячую клавишу;<br>* При зажатой клавише - задачи отображаются при удержании горячей клавиши;<br>* Показать/Скрыть по клавише - включение и отключение задач производится выбранной горячей клавишей при однократном нажатии.{/BODY}',
                      'itemRenderer': 'DropDownListItemRendererSound',
                      'options': [{'label': 'Постоянно'},
                                  {'label': 'Доп. инфо по клавише'},
                                  {'label': 'При зажатой клавише'},
                                  {'label': 'Показать/Скрыть по клавише'}],
                      'width': 200,
                      'value': g_potapov.config['displayType'],
                      'varName': 'displayType'}, {'type': 'HotKey',
                      'text': 'Горячая клавиша для действий',
                      'tooltip': '{HEADER}Горячая клавиша для действий{/HEADER}{BODY}Горячая клавиша для действий в зависимости от метода отображения панели{/BODY}',
                      'value': g_potapov.config['actionKeySet'],
                      'varName': 'actionKeySet'}, {'type': 'CheckBox',
                      'text': 'Отображать название задачи',
                      'value': g_potapov.config['displayName'],
                      'tooltip': '',
                      'varName': 'displayName'}]}
        g_modsSettingsApi.setModTemplate(self.linkage, self.template, self.onModSettingsChanged)

    def onModSettingsChanged(self, linkage, newSettings):
        if linkage == self.linkage:
            g_potapov._Potapov__config['enable'] = newSettings['enabled']
            g_potapov._Potapov__for_dumps['enable'] = newSettings['enabled']
            if newSettings['displayPattern'] != g_potapov._Potapov__for_dumps['displayPattern']:
                g_potapov._Potapov__for_dumps['displayPattern'] = newSettings['displayPattern']
                g_potapov._Potapov__for_dumps['displayPosOffsetX'] = 0
                g_potapov._Potapov__for_dumps['displayPosOffsetY'] = 0
                g_potapov._Potapov__config['displayPattern'] = newSettings['displayPattern']
                g_potapov._Potapov__config['displayPosOffsetX'] = 0
                g_potapov._Potapov__config['displayPosOffsetY'] = 0
            g_potapov._Potapov__config['displayWidth'] = newSettings['displayWidth']
            g_potapov._Potapov__for_dumps['displayWidth'] = newSettings['displayWidth']
            g_potapov._Potapov__config['displayType'] = newSettings['displayType']
            g_potapov._Potapov__for_dumps['displayType'] = newSettings['displayType']
            displayStyle = g_potapov._Potapov__config['styleFile']
            if newSettings['displayStyle'] == 0:
                displayStyle = 'mod_pro_potapov/styles/default_orange.json' if IS_PROTANKI else 'mod_potapov/styles/default_orange.json'
            if newSettings['displayStyle'] == 1:
                displayStyle = 'mod_pro_potapov/styles/default_green.json' if IS_PROTANKI else 'mod_potapov/styles/default_green.json'
            if newSettings['displayStyle'] == 2:
                displayStyle = 'mod_pro_potapov/styles/default_blue.json' if IS_PROTANKI else 'mod_potapov/styles/default_blue.json'
            if newSettings['displayStyle'] == 3:
                displayStyle = 'mod_pro_potapov/styles/minimal.json' if IS_PROTANKI else 'mod_potapov/styles/minimal.json'
            if newSettings['displayStyle'] == 4:
                displayStyle = 'mod_pro_potapov/styles/color_blind.json' if IS_PROTANKI else 'mod_potapov/styles/color_blind.json'
            if newSettings['displayStyle'] == 5:
                displayStyle = 'mod_pro_potapov/styles/2rokk.json' if IS_PROTANKI else 'mod_potapov/styles/2rokk.json'
            if newSettings['displayStyle'] == 6:
                displayStyle = g_potapov._Potapov__config['styleFile']
            needReloadStyle = False
            g_potapov._Potapov__config['styleFile'] = displayStyle
            if displayStyle != g_potapov._Potapov__for_dumps['styleFile']:
                needReloadStyle = True
            g_potapov._Potapov__for_dumps['styleFile'] = displayStyle
            g_potapov._Potapov__config['actionKeySet'] = newSettings['actionKeySet']
            g_potapov._Potapov__for_dumps['actionKeySet'] = newSettings['actionKeySet']
            g_potapov._Potapov__config['displayName'] = newSettings['displayName']
            g_potapov._Potapov__for_dumps['displayName'] = newSettings['displayName']
            if IS_PROTANKI:
                with codecs.open('/'.join([WOT_INFO.GUI_MODS, 'mod_pro_potapov', 'pro_potapov.ptc']), 'w+', 'utf-8-sig') as fh:
                    fh.write(json.dumps(g_potapov._Potapov__for_dumps, ensure_ascii=False, indent=4, separators=(',', ': '), sort_keys=True))
            else:
                with codecs.open('/'.join([WOT_INFO.GUI_MODS, 'mod_potapov', 'potapov.json']), 'w+', 'utf-8-sig') as fh:
                    fh.write(json.dumps(g_potapov._Potapov__for_dumps, ensure_ascii=False, indent=4, separators=(',', ': '), sort_keys=True))
            if needReloadStyle:
                g_potapov.readConfig()
            g_potapov.guiShomMaximal = False if g_potapov._Potapov__config['displayType'] == 1 else True


if IS_PROTANKI:
    if IS_CLIENT:
        print '[NOTE] package loaded: mod_pro_potapov'
        g_potapov = Potapov()
        g_MSMod = ModSettingsMod()
    else:
        print '[NOTE] mod_pro_potapov обнаружил неполную установку, скачайте последнюю версию с http://protanki.tv/'
        print '[NOTE] mod_pro_potapov detect incomplete installation, download latest version from http://protanki.tv/'
        g_potapov = None
        g_CCMod = None
        g_MSMod = None
        del Potapov
        del ModSettingsMod
else:

    def IS_CLIENT():


    IS_CLIENT = IS_CLIENT()
    if IS_CLIENT:
        g_potapov = Potapov()
        g_MSMod = ModSettingsMod()
        print '[MOD] mod loaded: mod_potapov'
    else:
        g_potapov = None
        g_CCMod = None
        g_MSMod = None
        del Potapov
        del ControlCenterMod
        del ModSettingsMod
del IS_CLIENT